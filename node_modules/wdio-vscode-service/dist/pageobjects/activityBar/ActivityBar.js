var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ViewControl, ActionsControl } from '../index.js';
import { PageDecorator, ElementWithContextMenu } from '../utils.js';
import { ActivityBar as ActivityBarLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing the left side activity bar in VS Code
 *
 * @category ActivityBar
 */
let ActivityBar = class ActivityBar extends ElementWithContextMenu {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'ActivityBar';
    }
    /**
     * Find all view containers displayed in the activity bar
     * @returns Promise resolving to array of ViewControl objects
     */
    async getViewControls() {
        const views = [];
        const viewContainer = await this.viewContainer$;
        for (const element of await viewContainer.$$(this.locators.actionItem)) {
            views.push(await new ViewControl(this.locatorMap, 
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            element, this).wait());
        }
        return views;
    }
    /**
     * Find a view container with a given title
     * @param name title of the view
     * @returns Promise resolving to ViewControl object representing the view selector, undefined if not found
     */
    async getViewControl(name) {
        const controls = await this.getViewControls();
        const names = await Promise.all(controls.map(async (item) => item.getTitle()));
        const index = names.findIndex((value) => value.indexOf(name) > -1);
        if (index > -1) {
            return controls[index];
        }
        return undefined;
    }
    /**
     * Returns selected view control
     * @returns Promise resolving to selected ViewControl object
     */
    async getSelectedViewAction() {
        const element = await this.viewContainer$.$(this.locators.actionItemSelected);
        return new ViewControl(this.locatorMap, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        element, this).wait();
    }
    /**
     * Find all global action controls displayed on the bottom of the activity bar
     * @returns Promise resolving to array of ActionsControl objects
     */
    async getGlobalActions() {
        const actions = [];
        const actionContainer = await this.actionsContainer$;
        for (const element of await actionContainer.$$(this.locators.actionItem)) {
            actions.push(await new ActionsControl(this.locatorMap, 
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            element).wait());
        }
        return actions;
    }
    /**
     * Find an action control with a given title
     * @param name title of the global action
     * @returns Promise resolving to ActionsControl object representing the action selector, undefined if not found
     */
    async getGlobalAction(name) {
        const actions = await this.getGlobalActions();
        const names = await Promise.all(actions.map(async (item) => item.getTitle()));
        const index = names.findIndex((value) => value.indexOf(name) > -1);
        if (index > -1) {
            return actions[index];
        }
        return undefined;
    }
};
ActivityBar = __decorate([
    PageDecorator(ActivityBarLocators)
], ActivityBar);
export { ActivityBar };
//# sourceMappingURL=data:application/json;base64,