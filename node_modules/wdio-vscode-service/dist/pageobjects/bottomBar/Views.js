var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import clipboard from 'clipboardy';
import { Key } from 'webdriverio';
import { Workbench, BottomBarPanel, ContentAssist } from '../../index.js';
import { TextView, ChannelView } from './AbstractViews.js';
import { ElementWithContextMenu, PageDecorator, sleep } from '../utils.js';
import { OutputView as OutputViewLocators, DebugConsoleView as DebugConsoleViewLocators, TerminalView as TerminalViewLocators } from '../../locators/1.73.0.js';
/**
 * Output view of the bottom panel
 *
 * ```ts
 * const bottomBar = workbench.getBottomBar()
 * const outputView = await bottomBar.openOutputView()
 * console.log(await outputView.getChannelNames())
 * // returns
 * // [
 * //   'Tasks',
 * //   'Extensions',
 * //   'Microsoft Authentication',
 * //   'Git',
 * //   'GitHub Authentication',
 * //   'Log (Window)',
 * //   'Log (Main)',
 * //   'Log (Extension Host)',
 * //   'Log (Settings Sync)',
 * //   'Log (Shared)'
 * // ]
 * ```
 *
 * @category BottomBar
 */
let OutputView = class OutputView extends TextView {
    constructor(locators, panel = new BottomBarPanel(locators)) {
        super(locators);
        this.panel = panel;
        /**
         * @private
         */
        this.locatorKey = 'OutputView';
        this.actionsLabel = locators.OutputView.actionsLabel;
        this.setParentElement(panel.elem);
    }
};
OutputView = __decorate([
    PageDecorator(OutputViewLocators)
], OutputView);
export { OutputView };
/**
 * Debug Console view on the bottom panel
 * Most functionality will only be available when a debug session is running
 *
 * @category BottomBar
 */
let DebugConsoleView = class DebugConsoleView extends ElementWithContextMenu {
    constructor(locators, panel = new BottomBarPanel(locators)) {
        super(locators);
        this.panel = panel;
        /**
         * @private
         */
        this.locatorKey = 'DebugConsoleView';
        this.setParentElement(panel.elem);
    }
    /**
     * Get all text from the debug console
     */
    async getText() {
        const menu = await this.openContextMenu();
        await menu.select('Copy All');
        const text = await clipboard.read();
        await clipboard.write('');
        return text;
    }
    /**
     * Clear the console of all text
     */
    async clearText() {
        const menu = await this.openContextMenu();
        await menu.select('Clear Console');
    }
    /**
     * Type an expression into the debug console text area
     * @param expression expression in form of a string
     */
    async setExpression(expression) {
        const textarea = await this.elem.$(this.locatorMap.BottomBarViews.textArea);
        await textarea.setValue(expression);
    }
    /**
     * Evaluate an expression:
     *  - if no argument is supplied, evaluate the current expression present in debug console text area
     *  - if a string argument is supplied, replace the current expression with the `expression` argument and evaluate
     *
     * @param expression expression to evaluate. To use existing contents of the debug console
     *                   text area instead, don't define this argument
     */
    async evaluateExpression(expression) {
        if (expression) {
            await this.setExpression(expression);
        }
        await browser.keys('Enter');
    }
    /**
     * Create a content assist page object
     * @returns promise resolving to ContentAssist object
     */
    async getContentAssist() {
        return new ContentAssist(this.locatorMap, this).wait();
    }
};
DebugConsoleView = __decorate([
    PageDecorator(DebugConsoleViewLocators)
], DebugConsoleView);
export { DebugConsoleView };
/**
 * Terminal view on the bottom panel
 *
 * @category BottomBar
 */
let TerminalView = class TerminalView extends ChannelView {
    constructor(locators, panel = new BottomBarPanel(locators)) {
        super(locators);
        this.panel = panel;
        /**
         * @private
         */
        this.locatorKey = 'TerminalView';
        this.actionsLabel = locators.OutputView.actionsLabel;
    }
    /**
     * Execute command in the internal terminal and wait for results
     * @param command text of the command
     * @param timeout optional maximum time to wait for completion in milliseconds, 0 for unlimited
     * @returns Promise resolving when the command is finished
     */
    async executeCommand(command, timeout = 0) {
        const input = await this.textArea$;
        try {
            await input.clearValue();
        }
        catch (err) {
            // try clearing, ignore if not available
        }
        await input.setValue(command);
        await browser.action('key').down(Key.Enter).up(Key.Enter).perform();
        let timer = 0;
        let style = await input.getCSSProperty('left');
        do {
            if (timeout > 0 && timer > timeout) {
                throw new Error(`Timeout of ${timeout}ms exceeded`);
            }
            await sleep(500);
            timer += 500;
            style = await input.getCSSProperty('left');
        } while (style.value === '0px');
    }
    /**
     * Get all text from the internal terminal
     * Beware, no formatting.
     * @returns Promise resolving to all terminal text
     */
    async getText() {
        const workbench = new Workbench(this.locatorMap);
        await workbench.executeCommand('terminal select all');
        // eslint-disable-next-line wdio/no-pause
        await browser.pause(500);
        await workbench.executeCommand('terminal copy selection');
        // eslint-disable-next-line wdio/no-pause
        await browser.pause(500);
        const text = clipboard.readSync();
        clipboard.writeSync('');
        return text;
    }
    /**
     * Destroy the currently open terminal
     * @returns Promise resolving when Kill Terminal button is pressed
     */
    async killTerminal() {
        await new Workbench(this.locatorMap)
            .executeCommand('terminal: kill the active terminal instance');
    }
    /**
     * Initiate new terminal creation
     * @returns Promise resolving when New Terminal button is pressed
     */
    async newTerminal() {
        await new Workbench(this.locatorMap)
            .executeCommand(this.locators.newCommand);
        const combo = await this.panel.elem.$$(this.locatorMap.BottomBarViews.channelCombo);
        if (combo.length < 1) {
            await browser.waitUntil(async () => {
                const list = await this.tabList$$;
                return list.length > 0;
            }, { timeout: 5000 });
        }
    }
    async getCurrentChannel() {
        const combo = await this.panel.elem.$$(this.locatorMap.BottomBarViews.channelCombo);
        if (combo.length > 0) {
            return super.getCurrentChannel();
        }
        const singleTerm = await this.panel.elem.$$(this.locators.singleTab);
        if (singleTerm.length > 0) {
            return singleTerm[0].getText();
        }
        const list = await this.tabList$;
        const row = await list.$(this.locators.selectedRow);
        const label = (await row.getAttribute('aria-label')).split(' ');
        return `${label[1]}: ${label[2]}`;
    }
    async selectChannel(name) {
        const combo = await this.panel.elem.$$(this.locatorMap.BottomBarViews.channelCombo);
        if (combo.length > 0) {
            return super.selectChannel(name);
        }
        const singleTerm = await this.panel.elem.$$(this.locators.singleTab);
        if (singleTerm.length > 0) {
            return undefined;
        }
        const matches = name.match(/.*(\d+).?\s.*/);
        if (matches === null || !matches[1]) {
            throw new Error(`Channel ${name} not found`);
        }
        const channelNumber = matches[1];
        const list = await this.tabList$;
        const rows = await list.$$(this.locators.row);
        for (const row of rows) {
            const label = await row.getAttribute('aria-label');
            if (label.includes(channelNumber)) {
                await row.click();
                return undefined;
            }
        }
        throw new Error(`Channel ${name} not found`);
    }
};
TerminalView = __decorate([
    PageDecorator(TerminalViewLocators)
], TerminalView);
export { TerminalView };
//# sourceMappingURL=data:application/json;base64,