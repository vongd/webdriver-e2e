var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { TitleBar } from '../menu/TitleBar.js';
import { SideBarView } from '../sidebar/SideBarView.js';
import { ActivityBar } from '../activityBar/ActivityBar.js';
import { StatusBar } from '../statusBar/StatusBar.js';
import { EditorView } from '../editor/EditorView.js';
import { BottomBarPanel } from '../bottomBar/BottomBarPanel.js';
import { StandaloneNotification } from './Notification.js';
import { QuickOpenBox, InputBox } from './Input.js';
import { SettingsEditor } from '../editor/SettingsEditor.js';
import { WebView } from './WebView.js';
import { PageDecorator, BasePage, sleep } from '../utils.js';
import { Workbench as WorkbenchLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing the custom VSCode title bar
 *
 * @category Workbench
 */
let Workbench = class Workbench extends BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'Workbench';
    }
    /**
     * Get a title bar handle
     */
    getTitleBar() {
        return new TitleBar(this.locatorMap);
    }
    /**
     * Get a side bar handle
     */
    getSideBar() {
        return new SideBarView(this.locatorMap);
    }
    /**
     * Get an activity bar handle
     */
    getActivityBar() {
        return new ActivityBar(this.locatorMap);
    }
    /**
     * Get a status bar handle
     */
    getStatusBar() {
        return new StatusBar(this.locatorMap);
    }
    /**
     * Get a bottom bar handle
     */
    getBottomBar() {
        return new BottomBarPanel(this.locatorMap);
    }
    /**
     * Get a handle for the editor view
     */
    getEditorView() {
        return new EditorView(this.locatorMap);
    }
    /**
     * Get all available webviews
     */
    getAllWebviews() {
        return WebView.getAllWebViews(this._locators);
    }
    /**
     * Get webview by title
     */
    async getWebviewByTitle(title) {
        const webviews = await this.getAllWebviews();
        if (webviews.length === 0) {
            throw new Error('No webviews found');
        }
        const foundTitles = [];
        const getTitle = () => document.title;
        for (const webview of webviews) {
            /**
             * jump into webview
             */
            await webview.open();
            /**
             * get the title of webview
             */
            const webviewTitle = await browser.execute(getTitle);
            foundTitles.push(webviewTitle);
            /**
             * jump out of webview
             */
            await webview.close();
            if (webviewTitle.match(title)) {
                return webview;
            }
        }
        throw new Error(`Couldn't find webview with title "${title}", `
            + `the following webview titles were found: "${foundTitles.join('", "')}"`);
    }
    /**
     * Get all standalone notifications (notifications outside the notifications center)
     * @returns Promise resolving to array of Notification objects
     */
    async getNotifications() {
        const notifications = [];
        const containers = await this.notificationContainer$$;
        if (containers.length === 0) {
            return [];
        }
        for (const container of containers) {
            const elements = await container.$$(this.locators.notificationItem);
            for (const element of elements) {
                notifications.push(await new StandaloneNotification(this.locatorMap, 
                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                element).wait());
            }
        }
        return notifications;
    }
    /**
     * Verifies if any notifications are shown
     * @returns true if workbench has notifications, false otherwise
     */
    hasNotifications() {
        return this.notificationContainer$.isExisting();
    }
    /**
     * Opens the notifications center
     * @returns Promise resolving to NotificationsCenter object
     */
    openNotificationsCenter() {
        const statusBar = new StatusBar(this.locatorMap);
        return statusBar.openNotificationsCenter();
    }
    /**
     * Opens the settings editor
     *
     * @returns promise that resolves to a SettingsEditor instance
     */
    async openSettings() {
        await this.executeCommand('Preferences: Open User Settings');
        await new EditorView(this.locatorMap).openEditor('Settings');
        await this.elem.$(this.locatorMap.Editor.elem).waitForExist();
        await sleep(500);
        return new SettingsEditor(this.locatorMap);
    }
    /**
     * Open the VS Code command line prompt
     * @returns Promise resolving to InputBox (vscode 1.44+) or QuickOpenBox (vscode up to 1.43) object
     */
    async openCommandPrompt() {
        const editorView = await new EditorView(this.locatorMap).wait();
        const webview = await editorView.webView$$;
        if (webview.length > 0) {
            const tab = await editorView.getActiveTab();
            if (tab) {
                await tab.elem.addValue('F1');
                const inputBox = new InputBox(this.locatorMap).wait();
                return inputBox;
            }
        }
        await browser.keys(['F1']);
        if ((await browser.getVSCodeChannel() === 'vscode' && await browser.getVSCodeVersion() >= '1.44.0')
            || await browser.getVSCodeVersion() === 'insiders') {
            return new InputBox(this.locatorMap).wait();
        }
        return new QuickOpenBox(this.locatorMap).wait();
    }
    /**
     * Open the command prompt, type in a command, find the command using a fuzzy match, and execute
     * @param command text of the command to be executed
     * @returns Promise resolving to InputBox (vscode 1.44+) or QuickOpenBox (vscode up to 1.43) object
     * when the command prompt is confirmed
     */
    async executeCommand(command) {
        const prompt = await this.openCommandPrompt();
        await prompt.setText(`>${command}`);
        await prompt.confirm();
        return prompt;
    }
    /**
     * Open the command prompt, type in a command, find the command from the quick pick list, and execute
     * @param command text of the command to be executed
     * @returns Promise resolving to InputBox (vscode 1.44+) or QuickOpenBox (vscode up to 1.43) object
     * when the command prompt is confirmed
     */
    async executeQuickPick(command) {
        const prompt = await this.openCommandPrompt();
        await prompt.setText(`>${command}`);
        const quickPicks = await prompt.getQuickPicks();
        for (const quickPick of quickPicks) {
            const label = await quickPick.getLabel();
            if (label === command) {
                await quickPick.select();
                return prompt;
            }
        }
        throw new Error('Command not found');
    }
};
Workbench = __decorate([
    PageDecorator(WorkbenchLocators)
], Workbench);
export { Workbench };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV29ya2JlbmNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3dvcmtiZW5jaC9Xb3JrYmVuY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFBO0FBQzlDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUN2RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sK0JBQStCLENBQUE7QUFDM0QsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3JELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZ0NBQWdDLENBQUE7QUFDL0QsT0FBTyxFQUFnQixzQkFBc0IsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBRXhFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLE1BQU0sWUFBWSxDQUFBO0FBQ25ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUM1RCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBRXRDLE9BQU8sRUFDSCxhQUFhLEVBQWtCLFFBQVEsRUFBRSxLQUFLLEVBQ2pELE1BQU0sYUFBYSxDQUFBO0FBQ3BCLE9BQU8sRUFBRSxTQUFTLElBQUksaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUd6RTs7OztHQUlHO0FBRUksSUFBTSxTQUFTLEdBQWYsTUFBTSxTQUFVLFNBQVEsUUFBa0M7SUFBMUQ7O1FBQ0g7O1dBRUc7UUFDSSxlQUFVLEdBQUcsV0FBb0IsQ0FBQTtJQWlONUMsQ0FBQztJQS9NRzs7T0FFRztJQUNILFdBQVc7UUFDUCxPQUFPLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN4QyxDQUFDO0lBRUQ7O09B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Q25CLE1BQU0sU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFBO2dCQUN4QixPQUFPLE1BQU0sQ0FBQTthQUNoQjtTQUNKO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0lBQ3hDLENBQUM7Q0FDSixDQUFBO0FBck5ZLFNBQVM7SUFEckIsYUFBYSxDQUFDLGlCQUFpQixDQUFDO0dBQ3BCLFNBQVMsQ0FxTnJCO1NBck5ZLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUaXRsZUJhciB9IGZyb20gJy4uL21lbnUvVGl0bGVCYXIuanMnXG5pbXBvcnQgeyBTaWRlQmFyVmlldyB9IGZyb20gJy4uL3NpZGViYXIvU2lkZUJhclZpZXcuanMnXG5pbXBvcnQgeyBBY3Rpdml0eUJhciB9IGZyb20gJy4uL2FjdGl2aXR5QmFyL0FjdGl2aXR5QmFyLmpzJ1xuaW1wb3J0IHsgU3RhdHVzQmFyIH0gZnJvbSAnLi4vc3RhdHVzQmFyL1N0YXR1c0Jhci5qcydcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tICcuLi9lZGl0b3IvRWRpdG9yVmlldy5qcydcbmltcG9ydCB7IEJvdHRvbUJhclBhbmVsIH0gZnJvbSAnLi4vYm90dG9tQmFyL0JvdHRvbUJhclBhbmVsLmpzJ1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uLCBTdGFuZGFsb25lTm90aWZpY2F0aW9uIH0gZnJvbSAnLi9Ob3RpZmljYXRpb24uanMnXG5pbXBvcnQgeyBOb3RpZmljYXRpb25zQ2VudGVyIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25zQ2VudGVyLmpzJ1xuaW1wb3J0IHsgUXVpY2tPcGVuQm94LCBJbnB1dEJveCB9IGZyb20gJy4vSW5wdXQuanMnXG5pbXBvcnQgeyBTZXR0aW5nc0VkaXRvciB9IGZyb20gJy4uL2VkaXRvci9TZXR0aW5nc0VkaXRvci5qcydcbmltcG9ydCB7IFdlYlZpZXcgfSBmcm9tICcuL1dlYlZpZXcuanMnXG5cbmltcG9ydCB7XG4gICAgUGFnZURlY29yYXRvciwgSVBhZ2VEZWNvcmF0b3IsIEJhc2VQYWdlLCBzbGVlcFxufSBmcm9tICcuLi91dGlscy5qcydcbmltcG9ydCB7IFdvcmtiZW5jaCBhcyBXb3JrYmVuY2hMb2NhdG9ycyB9IGZyb20gJy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuZXhwb3J0IGludGVyZmFjZSBXb3JrYmVuY2ggZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgV29ya2JlbmNoTG9jYXRvcnM+IHt9XG4vKipcbiAqIFBhZ2Ugb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgY3VzdG9tIFZTQ29kZSB0aXRsZSBiYXJcbiAqXG4gKiBAY2F0ZWdvcnkgV29ya2JlbmNoXG4gKi9cbkBQYWdlRGVjb3JhdG9yKFdvcmtiZW5jaExvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIFdvcmtiZW5jaCBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBXb3JrYmVuY2hMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnV29ya2JlbmNoJyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgdGl0bGUgYmFyIGhhbmRsZVxuICAgICAqL1xuICAgIGdldFRpdGxlQmFyICgpOiBUaXRsZUJhciB7XG4gICAgICAgIHJldHVybiBuZXcgVGl0bGVCYXIodGhpcy5sb2NhdG9yTWFwKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhIHNpZGUgYmFyIGhhbmRsZVxuICAgICAqL1xuICAgIGdldFNpZGVCYXIgKCk6IFNpZGVCYXJWaWV3PGFueT4ge1xuICAgICAgICByZXR1cm4gbmV3IFNpZGVCYXJWaWV3PGFueT4odGhpcy5sb2NhdG9yTWFwKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbiBhY3Rpdml0eSBiYXIgaGFuZGxlXG4gICAgICovXG4gICAgZ2V0QWN0aXZpdHlCYXIgKCk6IEFjdGl2aXR5QmFyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBY3Rpdml0eUJhcih0aGlzLmxvY2F0b3JNYXApXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc3RhdHVzIGJhciBoYW5kbGVcbiAgICAgKi9cbiAgICBnZXRTdGF0dXNCYXIgKCk6IFN0YXR1c0JhciB7XG4gICAgICAgIHJldHVybiBuZXcgU3RhdHVzQmFyKHRoaXMubG9jYXRvck1hcClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBib3R0b20gYmFyIGhhbmRsZVxuICAgICAqL1xuICAgIGdldEJvdHRvbUJhciAoKTogQm90dG9tQmFyUGFuZWwge1xuICAgICAgICByZXR1cm4gbmV3IEJvdHRvbUJhclBhbmVsKHRoaXMubG9jYXRvck1hcClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBoYW5kbGUgZm9yIHRoZSBlZGl0b3Igdmlld1xuICAgICAqL1xuICAgIGdldEVkaXRvclZpZXcgKCk6IEVkaXRvclZpZXcge1xuICAgICAgICByZXR1cm4gbmV3IEVkaXRvclZpZXcodGhpcy5sb2NhdG9yTWFwKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgYXZhaWxhYmxlIHdlYnZpZXdzXG4gICAgICovXG4gICAgZ2V0QWxsV2Vidmlld3MgKCkge1xuICAgICAgICByZXR1cm4gV2ViVmlldy5nZXRBbGxXZWJWaWV3cyh0aGlzLl9sb2NhdG9ycylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgd2VidmlldyBieSB0aXRsZVxuICAgICAqL1xuICAgIGFzeW5jIGdldFdlYnZpZXdCeVRpdGxlICh0aXRsZTogc3RyaW5nIHwgUmVnRXhwKSB7XG4gICAgICAgIGNvbnN0IHdlYnZpZXdzID0gYXdhaXQgdGhpcy5nZXRBbGxXZWJ2aWV3cygpXG5cbiAgICAgICAgaWYgKHdlYnZpZXdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyB3ZWJ2aWV3cyBmb3VuZCcpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmb3VuZFRpdGxlczogc3RyaW5nW10gPSBbXVxuICAgICAgICBjb25zdCBnZXRUaXRsZSA9ICgpID0+IGRvY3VtZW50LnRpdGxlXG4gICAgICAgIGZvciAoY29uc3Qgd2VidmlldyBvZiB3ZWJ2aWV3cykge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBqdW1wIGludG8gd2Vidmlld1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhd2FpdCB3ZWJ2aWV3Lm9wZW4oKVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIGdldCB0aGUgdGl0bGUgb2Ygd2Vidmlld1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBjb25zdCB3ZWJ2aWV3VGl0bGUgPSBhd2FpdCBicm93c2VyLmV4ZWN1dGUoZ2V0VGl0bGUpXG4gICAgICAgICAgICBmb3VuZFRpdGxlcy5wdXNoKHdlYnZpZXdUaXRsZSlcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBqdW1wIG91dCBvZiB3ZWJ2aWV3XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGF3YWl0IHdlYnZpZXcuY2xvc2UoKVxuXG4gICAgICAgICAgICBpZiAod2Vidmlld1RpdGxlLm1hdGNoKHRpdGxlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB3ZWJ2aWV3XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICBgQ291bGRuJ3QgZmluZCB3ZWJ2aWV3IHdpdGggdGl0bGUgXCIke3RpdGxlfVwiLCBgXG4gICAgICAgICAgICArIGB0aGUgZm9sbG93aW5nIHdlYnZpZXcgdGl0bGVzIHdlcmUgZm91bmQ6IFwiJHtmb3VuZFRpdGxlcy5qb2luKCdcIiwgXCInKX1cImBcbiAgICAgICAgKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgc3RhbmRhbG9uZSBub3RpZmljYXRpb25zIChub3RpZmljYXRpb25zIG91dHNpZGUgdGhlIG5vdGlmaWNhdGlvbnMgY2VudGVyKVxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGFycmF5IG9mIE5vdGlmaWNhdGlvbiBvYmplY3RzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0Tm90aWZpY2F0aW9ucyAoKTogUHJvbWlzZTxOb3RpZmljYXRpb25bXT4ge1xuICAgICAgICBjb25zdCBub3RpZmljYXRpb25zOiBOb3RpZmljYXRpb25bXSA9IFtdXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lcnMgPSBhd2FpdCB0aGlzLm5vdGlmaWNhdGlvbkNvbnRhaW5lciQkXG5cbiAgICAgICAgaWYgKGNvbnRhaW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgY29udGFpbmVyIG9mIGNvbnRhaW5lcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXdhaXQgY29udGFpbmVyLiQkKHRoaXMubG9jYXRvcnMubm90aWZpY2F0aW9uSXRlbSlcblxuICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAgICAgbm90aWZpY2F0aW9ucy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBuZXcgU3RhbmRhbG9uZU5vdGlmaWNhdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9jYXRvck1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50IGFzIGFueVxuICAgICAgICAgICAgICAgICAgICApLndhaXQoKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3RpZmljYXRpb25zXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgaWYgYW55IG5vdGlmaWNhdGlvbnMgYXJlIHNob3duXG4gICAgICogQHJldHVybnMgdHJ1ZSBpZiB3b3JrYmVuY2ggaGFzIG5vdGlmaWNhdGlvbnMsIGZhbHNlIG90aGVyd2lzZVxuICAgICAqL1xuICAgIGhhc05vdGlmaWNhdGlvbnMgKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ub3RpZmljYXRpb25Db250YWluZXIkLmlzRXhpc3RpbmcoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIHRoZSBub3RpZmljYXRpb25zIGNlbnRlclxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIE5vdGlmaWNhdGlvbnNDZW50ZXIgb2JqZWN0XG4gICAgICovXG4gICAgb3Blbk5vdGlmaWNhdGlvbnNDZW50ZXIgKCk6IFByb21pc2U8Tm90aWZpY2F0aW9uc0NlbnRlcj4ge1xuICAgICAgICBjb25zdCBzdGF0dXNCYXIgPSBuZXcgU3RhdHVzQmFyKHRoaXMubG9jYXRvck1hcClcbiAgICAgICAgcmV0dXJuIHN0YXR1c0Jhci5vcGVuTm90aWZpY2F0aW9uc0NlbnRlcigpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbnMgdGhlIHNldHRpbmdzIGVkaXRvclxuICAgICAqXG4gICAgICogQHJldHVybnMgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGEgU2V0dGluZ3NFZGl0b3IgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBhc3luYyBvcGVuU2V0dGluZ3MgKCk6IFByb21pc2U8U2V0dGluZ3NFZGl0b3I+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5leGVjdXRlQ29tbWFuZCgnUHJlZmVyZW5jZXM6IE9wZW4gVXNlciBTZXR0aW5ncycpXG4gICAgICAgIGF3YWl0IG5ldyBFZGl0b3JWaWV3KHRoaXMubG9jYXRvck1hcCkub3BlbkVkaXRvcignU2V0dGluZ3MnKVxuICAgICAgICBhd2FpdCB0aGlzLmVsZW0uJCh0aGlzLmxvY2F0b3JNYXAuRWRpdG9yLmVsZW0gYXMgc3RyaW5nKS53YWl0Rm9yRXhpc3QoKVxuICAgICAgICBhd2FpdCBzbGVlcCg1MDApXG4gICAgICAgIHJldHVybiBuZXcgU2V0dGluZ3NFZGl0b3IodGhpcy5sb2NhdG9yTWFwKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW4gdGhlIFZTIENvZGUgY29tbWFuZCBsaW5lIHByb21wdFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIElucHV0Qm94ICh2c2NvZGUgMS40NCspIG9yIFF1aWNrT3BlbkJveCAodnNjb2RlIHVwIHRvIDEuNDMpIG9iamVjdFxuICAgICAqL1xuICAgIGFzeW5jIG9wZW5Db21tYW5kUHJvbXB0ICgpOiBQcm9taXNlPFF1aWNrT3BlbkJveCB8IElucHV0Qm94PiB7XG4gICAgICAgIGNvbnN0IGVkaXRvclZpZXcgPSBhd2FpdCBuZXcgRWRpdG9yVmlldyh0aGlzLmxvY2F0b3JNYXApLndhaXQoKVxuICAgICAgICBjb25zdCB3ZWJ2aWV3ID0gYXdhaXQgZWRpdG9yVmlldy53ZWJWaWV3JCRcbiAgICAgICAgaWYgKHdlYnZpZXcubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgdGFiID0gYXdhaXQgZWRpdG9yVmlldy5nZXRBY3RpdmVUYWIoKVxuICAgICAgICAgICAgaWYgKHRhYikge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRhYi5lbGVtLmFkZFZhbHVlKCdGMScpXG4gICAgICAgICAgICAgICAgY29uc3QgaW5wdXRCb3ggPSBuZXcgSW5wdXRCb3godGhpcy5sb2NhdG9yTWFwKS53YWl0KClcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXRCb3hcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhd2FpdCBicm93c2VyLmtleXMoWydGMSddKVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAoYXdhaXQgYnJvd3Nlci5nZXRWU0NvZGVDaGFubmVsKCkgPT09ICd2c2NvZGUnICYmIGF3YWl0IGJyb3dzZXIuZ2V0VlNDb2RlVmVyc2lvbigpID49ICcxLjQ0LjAnKVxuICAgICAgICAgICAgfHwgYXdhaXQgYnJvd3Nlci5nZXRWU0NvZGVWZXJzaW9uKCkgPT09ICdpbnNpZGVycydcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IElucHV0Qm94KHRoaXMubG9jYXRvck1hcCkud2FpdCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBRdWlja09wZW5Cb3godGhpcy5sb2NhdG9yTWFwKS53YWl0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVuIHRoZSBjb21tYW5kIHByb21wdCwgdHlwZSBpbiBhIGNvbW1hbmQsIGZpbmQgdGhlIGNvbW1hbmQgdXNpbmcgYSBmdXp6eSBtYXRjaCwgYW5kIGV4ZWN1dGVcbiAgICAgKiBAcGFyYW0gY29tbWFuZCB0ZXh0IG9mIHRoZSBjb21tYW5kIHRvIGJlIGV4ZWN1dGVkXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gSW5wdXRCb3ggKHZzY29kZSAxLjQ0Kykgb3IgUXVpY2tPcGVuQm94ICh2c2NvZGUgdXAgdG8gMS40Mykgb2JqZWN0XG4gICAgICogd2hlbiB0aGUgY29tbWFuZCBwcm9tcHQgaXMgY29uZmlybWVkXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZUNvbW1hbmQgKGNvbW1hbmQ6IHN0cmluZyk6IFByb21pc2U8SW5wdXRCb3ggfCBRdWlja09wZW5Cb3g+IHtcbiAgICAgICAgY29uc3QgcHJvbXB0ID0gYXdhaXQgdGhpcy5vcGVuQ29tbWFuZFByb21wdCgpXG4gICAgICAgIGF3YWl0IHByb21wdC5zZXRUZXh0KGA+JHtjb21tYW5kfWApXG4gICAgICAgIGF3YWl0IHByb21wdC5jb25maXJtKClcblxuICAgICAgICByZXR1cm4gcHJvbXB0XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgY29tbWFuZCBwcm9tcHQsIHR5cGUgaW4gYSBjb21tYW5kLCBmaW5kIHRoZSBjb21tYW5kIGZyb20gdGhlIHF1aWNrIHBpY2sgbGlzdCwgYW5kIGV4ZWN1dGVcbiAgICAgKiBAcGFyYW0gY29tbWFuZCB0ZXh0IG9mIHRoZSBjb21tYW5kIHRvIGJlIGV4ZWN1dGVkXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gSW5wdXRCb3ggKHZzY29kZSAxLjQ0Kykgb3IgUXVpY2tPcGVuQm94ICh2c2NvZGUgdXAgdG8gMS40Mykgb2JqZWN0XG4gICAgICogd2hlbiB0aGUgY29tbWFuZCBwcm9tcHQgaXMgY29uZmlybWVkXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZVF1aWNrUGljayAoY29tbWFuZDogc3RyaW5nKTogUHJvbWlzZTxJbnB1dEJveCB8IFF1aWNrT3BlbkJveD4ge1xuICAgICAgICBjb25zdCBwcm9tcHQgPSBhd2FpdCB0aGlzLm9wZW5Db21tYW5kUHJvbXB0KClcbiAgICAgICAgYXdhaXQgcHJvbXB0LnNldFRleHQoYD4ke2NvbW1hbmR9YClcbiAgICAgICAgY29uc3QgcXVpY2tQaWNrcyA9IGF3YWl0IHByb21wdC5nZXRRdWlja1BpY2tzKClcbiAgICAgICAgZm9yIChjb25zdCBxdWlja1BpY2sgb2YgcXVpY2tQaWNrcykge1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBhd2FpdCBxdWlja1BpY2suZ2V0TGFiZWwoKVxuICAgICAgICAgICAgaWYgKGxhYmVsID09PSBjb21tYW5kKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgcXVpY2tQaWNrLnNlbGVjdCgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb21wdFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21tYW5kIG5vdCBmb3VuZCcpXG4gICAgfVxufVxuIl19