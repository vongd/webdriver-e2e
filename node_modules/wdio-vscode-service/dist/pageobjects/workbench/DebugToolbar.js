var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { BasePage, PageDecorator } from '../utils.js';
import { DebugToolbar as DebugToolbarLocators } from '../../locators/1.73.0.js';
/**
 * Page object for the Debugger Toolbar
 *
 * @category Workbench
 */
let DebugToolbar = class DebugToolbar extends BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'DebugToolbar';
    }
    /**
     * Wait for the execution to pause at the next breakpoint
     */
    async waitForBreakPoint() {
        await browser.waitUntil(async () => {
            const btn = await this.button$('continue');
            return btn.isEnabled();
        });
    }
    /**
     * Click Continue
     */
    async continue() {
        await this.getButton('continue').click();
    }
    /**
     * Click Disconnect
     */
    async disconnect() {
        await this.getButton('disconnect').click();
    }
    /**
     * Click Pause
     */
    async pause() {
        await this.getButton('pause').click();
    }
    /**
     * Click Step Over
     */
    async stepOver() {
        await this.getButton('step-oer').click();
    }
    /**
     * Click Step Into
     */
    async stepInto() {
        await this.getButton('step-ito').click();
    }
    /**
     * Click Step Out
     */
    async stepOut() {
        await this.getButton('step-ot').click();
    }
    /**
     * Click Restart
     */
    async restart() {
        await this.getButton('restart').click();
    }
    /**
     * Click Stop
     */
    async stop() {
        await this.getButton('stop').click();
    }
    getButton(name) {
        return this.button$(name);
    }
};
DebugToolbar = __decorate([
    PageDecorator(DebugToolbarLocators)
], DebugToolbar);
export { DebugToolbar };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdUb29sYmFyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3dvcmtiZW5jaC9EZWJ1Z1Rvb2xiYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQWtCLE1BQU0sYUFBYSxDQUFBO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLElBQUksb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUcvRTs7OztHQUlHO0FBRUksSUFBTSxZQUFZLEdBQWxCLE1BQU0sWUFBYSxTQUFRLFFBQXFDO0lBQWhFOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGNBQXVCLENBQUE7SUF1RS9DLENBQUM7SUFyRUc7O09BRUc7SUFDSCxLQUFLLENBQUMsaUJBQWlCO1FBQ25CLE1BQU0sT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUMvQixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDMUMsT0FBTyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDMUIsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsVUFBVTtRQUNaLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM5QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsS0FBSztRQUNQLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUN6QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM1QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsT0FBTztRQUNULE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsT0FBTztRQUNULE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUMzQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsSUFBSTtRQUNOLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUN4QyxDQUFDO0lBRU8sU0FBUyxDQUFFLElBQVk7UUFDM0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQzdCLENBQUM7Q0FDSixDQUFBO0FBM0VZLFlBQVk7SUFEeEIsYUFBYSxDQUFDLG9CQUFvQixDQUFDO0dBQ3ZCLFlBQVksQ0EyRXhCO1NBM0VZLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFpbmFibGVQcm9taXNlRWxlbWVudCB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuaW1wb3J0IHsgQmFzZVBhZ2UsIFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yIH0gZnJvbSAnLi4vdXRpbHMuanMnXG5pbXBvcnQgeyBEZWJ1Z1Rvb2xiYXIgYXMgRGVidWdUb29sYmFyTG9jYXRvcnMgfSBmcm9tICcuLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVidWdUb29sYmFyIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIERlYnVnVG9vbGJhckxvY2F0b3JzPiB7fVxuLyoqXG4gKiBQYWdlIG9iamVjdCBmb3IgdGhlIERlYnVnZ2VyIFRvb2xiYXJcbiAqXG4gKiBAY2F0ZWdvcnkgV29ya2JlbmNoXG4gKi9cbkBQYWdlRGVjb3JhdG9yKERlYnVnVG9vbGJhckxvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIERlYnVnVG9vbGJhciBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBEZWJ1Z1Rvb2xiYXJMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnRGVidWdUb29sYmFyJyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogV2FpdCBmb3IgdGhlIGV4ZWN1dGlvbiB0byBwYXVzZSBhdCB0aGUgbmV4dCBicmVha3BvaW50XG4gICAgICovXG4gICAgYXN5bmMgd2FpdEZvckJyZWFrUG9pbnQgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCBicm93c2VyLndhaXRVbnRpbChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBidG4gPSBhd2FpdCB0aGlzLmJ1dHRvbiQoJ2NvbnRpbnVlJylcbiAgICAgICAgICAgIHJldHVybiBidG4uaXNFbmFibGVkKClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBDb250aW51ZVxuICAgICAqL1xuICAgIGFzeW5jIGNvbnRpbnVlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXRCdXR0b24oJ2NvbnRpbnVlJykuY2xpY2soKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsaWNrIERpc2Nvbm5lY3RcbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXRCdXR0b24oJ2Rpc2Nvbm5lY3QnKS5jbGljaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xpY2sgUGF1c2VcbiAgICAgKi9cbiAgICBhc3luYyBwYXVzZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0QnV0dG9uKCdwYXVzZScpLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBTdGVwIE92ZXJcbiAgICAgKi9cbiAgICBhc3luYyBzdGVwT3ZlciAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0QnV0dG9uKCdzdGVwLW9lcicpLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBTdGVwIEludG9cbiAgICAgKi9cbiAgICBhc3luYyBzdGVwSW50byAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0QnV0dG9uKCdzdGVwLWl0bycpLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBTdGVwIE91dFxuICAgICAqL1xuICAgIGFzeW5jIHN0ZXBPdXQgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmdldEJ1dHRvbignc3RlcC1vdCcpLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGljayBSZXN0YXJ0XG4gICAgICovXG4gICAgYXN5bmMgcmVzdGFydCAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGF3YWl0IHRoaXMuZ2V0QnV0dG9uKCdyZXN0YXJ0JykuY2xpY2soKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsaWNrIFN0b3BcbiAgICAgKi9cbiAgICBhc3luYyBzdG9wICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXRCdXR0b24oJ3N0b3AnKS5jbGljaygpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRCdXR0b24gKG5hbWU6IHN0cmluZyk6IENoYWluYWJsZVByb21pc2VFbGVtZW50PFdlYmRyaXZlcklPLkVsZW1lbnQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnV0dG9uJChuYW1lKVxuICAgIH1cbn1cbiJdfQ==