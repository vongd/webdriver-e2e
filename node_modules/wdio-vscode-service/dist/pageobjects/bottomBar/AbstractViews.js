import { ElementWithContextMenu } from '../utils.js';
/**
 * View with channel selector/**
 *
 * @category BottomBar
 */
export class ChannelView extends ElementWithContextMenu {
    /**
    * Get names of all selectable channels
    * @returns Promise resolving to array of strings - channel names
    */
    async getChannelNames() {
        const select = await this.parent.$(this.locatorMap.BottomBarViews.outputChannels);
        await select.click();
        // stabelise view otherwise we might run into stale element issues
        // eslint-disable-next-line wdio/no-pause
        await browser.pause(100);
        const channels = await this.parent.$$(`${this.locatorMap.BottomBarViews.outputChannels} option`);
        const names = [];
        for (const channel of channels) {
            names.push(await channel.getAttribute('value'));
        }
        return names;
    }
    /**
     * Get name of the current channel
     * @returns Promise resolving to the current channel name
     */
    async getCurrentChannel() {
        const combo = await this.parent.$(this.locatorMap.BottomBarViews.channelCombo);
        return combo.getAttribute('title');
    }
    /**
     * Select a channel using the selector combo
     * @param name name of the channel to open
     */
    async selectChannel(name) {
        const select = await this.parent.$(this.locatorMap.BottomBarViews.outputChannels);
        await select.click();
        const channels = await this.parent.$$(`${this.locatorMap.BottomBarViews.outputChannels} option`);
        for (const channel of channels) {
            const val = await channel.getValue();
            if (val === name) {
                await channel.click();
                // eslint-disable-next-line wdio/no-pause
                await browser.pause(200);
                await browser.keys(['Escape']);
                return;
            }
        }
        throw new Error(`Channel ${name} not found`);
    }
}
/**
 * View with channel selection and text area
 */
export class TextView extends ChannelView {
    /**
     * Get all text from the currently open channel
     * @returns Promise resolving to the view's text
     */
    async getText() {
        const lines = await this.elem.$(this.locatorMap.OutputView.lines);
        const textLines = await browser.execute((elem) => Array.from(elem.children).map((l) => l.innerText), lines);
        return textLines
            // strip empty lines (usually the last one)
            .filter(Boolean)
            // replace `\u00A0` characters with white space
            // eslint-disable-next-line no-control-regex
            .map((l) => l.replace(/\u00A0/g, ' '));
    }
    /**
     * Clear the text in the current channel
     * @returns Promise resolving when the clear text button is pressed
     */
    async clearText() {
        await this.parent
            .$(this.locatorMap.BottomBarViews.actionsContainer(this.actionsLabel))
            .$(this.locatorMap.BottomBarViews.clearText)
            .click();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWJzdHJhY3RWaWV3cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy9ib3R0b21CYXIvQWJzdHJhY3RWaWV3cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxhQUFhLENBQUE7QUFFcEQ7Ozs7R0FJRztBQUNILE1BQU0sT0FBZ0IsV0FBZSxTQUFRLHNCQUF5QjtJQUdsRTs7O01BR0U7SUFDRixLQUFLLENBQUMsZUFBZTtRQUNqQixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLGNBQXdCLENBQUMsQ0FBQTtRQUMzRixNQUFNLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUVwQixrRUFBa0U7UUFDbEUseUNBQXlDO1FBQ3pDLE1BQU0sT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUN4QixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsY0FBYyxTQUFTLENBQUMsQ0FBQTtRQUVoRyxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUE7UUFDaEIsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDNUIsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtTQUNsRDtRQUNELE9BQU8sS0FBSyxDQUFBO0lBQ2hCLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsaUJBQWlCO1FBQ25CLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsWUFBc0IsQ0FBQyxDQUFBO1FBQ3hGLE9BQU8sS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLGFBQWEsQ0FBRSxJQUFZO1FBQzdCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsY0FBd0IsQ0FBQyxDQUFBO1FBQzNGLE1BQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBQ3BCLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxjQUFjLFNBQVMsQ0FBQyxDQUFBO1FBQ2hHLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzVCLE1BQU0sR0FBRyxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFBO1lBQ3BDLElBQUksR0FBRyxLQUFLLElBQUksRUFBRTtnQkFDZCxNQUFNLE9BQU8sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtnQkFDckIseUNBQXlDO2dCQUN6QyxNQUFNLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7Z0JBQ3hCLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUE7Z0JBQzlCLE9BQU07YUFDVDtTQUNKO1FBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLElBQUksWUFBWSxDQUFDLENBQUE7SUFDaEQsQ0FBQztDQUNKO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQWdCLFFBQVksU0FBUSxXQUFjO0lBR3BEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxPQUFPO1FBQ1QsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFlLENBQUMsQ0FBQTtRQUMzRSxNQUFNLFNBQVMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxPQUFPLENBQ25DLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNmLElBQThCLENBQUMsUUFBNEMsQ0FDL0UsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFDekIsS0FBSyxDQUNSLENBQUE7UUFFRCxPQUFPLFNBQVM7WUFDWiwyQ0FBMkM7YUFDMUMsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNoQiwrQ0FBK0M7WUFDL0MsNENBQTRDO2FBQzNDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFNBQVM7UUFDWCxNQUFNLElBQUksQ0FBQyxNQUFNO2FBQ1osQ0FBQyxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLGdCQUE2QixDQUFDLElBQUksQ0FBQyxZQUFZLENBQVcsQ0FBQzthQUM3RixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsU0FBbUIsQ0FBQzthQUNyRCxLQUFLLEVBQUUsQ0FBQTtJQUNoQixDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50V2l0aENvbnRleHRNZW51IH0gZnJvbSAnLi4vdXRpbHMuanMnXG5cbi8qKlxuICogVmlldyB3aXRoIGNoYW5uZWwgc2VsZWN0b3IvKipcbiAqXG4gKiBAY2F0ZWdvcnkgQm90dG9tQmFyXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDaGFubmVsVmlldzxUPiBleHRlbmRzIEVsZW1lbnRXaXRoQ29udGV4dE1lbnU8VD4ge1xuICAgIHByb3RlY3RlZCBhY3Rpb25zTGFiZWwhOiBzdHJpbmdcblxuICAgIC8qKlxuICAgICogR2V0IG5hbWVzIG9mIGFsbCBzZWxlY3RhYmxlIGNoYW5uZWxzXG4gICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBhcnJheSBvZiBzdHJpbmdzIC0gY2hhbm5lbCBuYW1lc1xuICAgICovXG4gICAgYXN5bmMgZ2V0Q2hhbm5lbE5hbWVzICgpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG4gICAgICAgIGNvbnN0IHNlbGVjdCA9IGF3YWl0IHRoaXMucGFyZW50LiQodGhpcy5sb2NhdG9yTWFwLkJvdHRvbUJhclZpZXdzLm91dHB1dENoYW5uZWxzIGFzIHN0cmluZylcbiAgICAgICAgYXdhaXQgc2VsZWN0LmNsaWNrKClcblxuICAgICAgICAvLyBzdGFiZWxpc2UgdmlldyBvdGhlcndpc2Ugd2UgbWlnaHQgcnVuIGludG8gc3RhbGUgZWxlbWVudCBpc3N1ZXNcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHdkaW8vbm8tcGF1c2VcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5wYXVzZSgxMDApXG4gICAgICAgIGNvbnN0IGNoYW5uZWxzID0gYXdhaXQgdGhpcy5wYXJlbnQuJCQoYCR7dGhpcy5sb2NhdG9yTWFwLkJvdHRvbUJhclZpZXdzLm91dHB1dENoYW5uZWxzfSBvcHRpb25gKVxuXG4gICAgICAgIGNvbnN0IG5hbWVzID0gW11cbiAgICAgICAgZm9yIChjb25zdCBjaGFubmVsIG9mIGNoYW5uZWxzKSB7XG4gICAgICAgICAgICBuYW1lcy5wdXNoKGF3YWl0IGNoYW5uZWwuZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuYW1lc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBuYW1lIG9mIHRoZSBjdXJyZW50IGNoYW5uZWxcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0aGUgY3VycmVudCBjaGFubmVsIG5hbWVcbiAgICAgKi9cbiAgICBhc3luYyBnZXRDdXJyZW50Q2hhbm5lbCAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgY29tYm8gPSBhd2FpdCB0aGlzLnBhcmVudC4kKHRoaXMubG9jYXRvck1hcC5Cb3R0b21CYXJWaWV3cy5jaGFubmVsQ29tYm8gYXMgc3RyaW5nKVxuICAgICAgICByZXR1cm4gY29tYm8uZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VsZWN0IGEgY2hhbm5lbCB1c2luZyB0aGUgc2VsZWN0b3IgY29tYm9cbiAgICAgKiBAcGFyYW0gbmFtZSBuYW1lIG9mIHRoZSBjaGFubmVsIHRvIG9wZW5cbiAgICAgKi9cbiAgICBhc3luYyBzZWxlY3RDaGFubmVsIChuYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ID0gYXdhaXQgdGhpcy5wYXJlbnQuJCh0aGlzLmxvY2F0b3JNYXAuQm90dG9tQmFyVmlld3Mub3V0cHV0Q2hhbm5lbHMgYXMgc3RyaW5nKVxuICAgICAgICBhd2FpdCBzZWxlY3QuY2xpY2soKVxuICAgICAgICBjb25zdCBjaGFubmVscyA9IGF3YWl0IHRoaXMucGFyZW50LiQkKGAke3RoaXMubG9jYXRvck1hcC5Cb3R0b21CYXJWaWV3cy5vdXRwdXRDaGFubmVsc30gb3B0aW9uYClcbiAgICAgICAgZm9yIChjb25zdCBjaGFubmVsIG9mIGNoYW5uZWxzKSB7XG4gICAgICAgICAgICBjb25zdCB2YWwgPSBhd2FpdCBjaGFubmVsLmdldFZhbHVlKClcbiAgICAgICAgICAgIGlmICh2YWwgPT09IG5hbWUpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjaGFubmVsLmNsaWNrKClcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgd2Rpby9uby1wYXVzZVxuICAgICAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIucGF1c2UoMjAwKVxuICAgICAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIua2V5cyhbJ0VzY2FwZSddKVxuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2hhbm5lbCAke25hbWV9IG5vdCBmb3VuZGApXG4gICAgfVxufVxuXG4vKipcbiAqIFZpZXcgd2l0aCBjaGFubmVsIHNlbGVjdGlvbiBhbmQgdGV4dCBhcmVhXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUZXh0VmlldzxUPiBleHRlbmRzIENoYW5uZWxWaWV3PFQ+IHtcbiAgICBwcm90ZWN0ZWQgYWN0aW9uc0xhYmVsITogc3RyaW5nXG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIHRleHQgZnJvbSB0aGUgY3VycmVudGx5IG9wZW4gY2hhbm5lbFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHRoZSB2aWV3J3MgdGV4dFxuICAgICAqL1xuICAgIGFzeW5jIGdldFRleHQgKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgY29uc3QgbGluZXMgPSBhd2FpdCB0aGlzLmVsZW0uJCh0aGlzLmxvY2F0b3JNYXAuT3V0cHV0Vmlldy5saW5lcyBhcyBzdHJpbmcpXG4gICAgICAgIGNvbnN0IHRleHRMaW5lcyA9IGF3YWl0IGJyb3dzZXIuZXhlY3V0ZShcbiAgICAgICAgICAgIChlbGVtKSA9PiBBcnJheS5mcm9tKFxuICAgICAgICAgICAgICAgIChlbGVtIGFzIGFueSBhcyBIVE1MRGl2RWxlbWVudCkuY2hpbGRyZW4gYXMgYW55IGFzIEFycmF5TGlrZTxIVE1MRGl2RWxlbWVudD5cbiAgICAgICAgICAgICkubWFwKChsKSA9PiBsLmlubmVyVGV4dCksXG4gICAgICAgICAgICBsaW5lc1xuICAgICAgICApXG5cbiAgICAgICAgcmV0dXJuIHRleHRMaW5lc1xuICAgICAgICAgICAgLy8gc3RyaXAgZW1wdHkgbGluZXMgKHVzdWFsbHkgdGhlIGxhc3Qgb25lKVxuICAgICAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAgICAgLy8gcmVwbGFjZSBgXFx1MDBBMGAgY2hhcmFjdGVycyB3aXRoIHdoaXRlIHNwYWNlXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgICAgICAgICAgLm1hcCgobCkgPT4gbC5yZXBsYWNlKC9cXHUwMEEwL2csICcgJykpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgdGhlIHRleHQgaW4gdGhlIGN1cnJlbnQgY2hhbm5lbFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gdGhlIGNsZWFyIHRleHQgYnV0dG9uIGlzIHByZXNzZWRcbiAgICAgKi9cbiAgICBhc3luYyBjbGVhclRleHQgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLnBhcmVudFxuICAgICAgICAgICAgLiQoKHRoaXMubG9jYXRvck1hcC5Cb3R0b21CYXJWaWV3cy5hY3Rpb25zQ29udGFpbmVyIGFzIEZ1bmN0aW9uKSh0aGlzLmFjdGlvbnNMYWJlbCkgYXMgc3RyaW5nKVxuICAgICAgICAgICAgLiQodGhpcy5sb2NhdG9yTWFwLkJvdHRvbUJhclZpZXdzLmNsZWFyVGV4dCBhcyBzdHJpbmcpXG4gICAgICAgICAgICAuY2xpY2soKVxuICAgIH1cbn1cbiJdfQ==