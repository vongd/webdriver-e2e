var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Key } from 'webdriverio';
import { TreeSection } from '../TreeSection.js';
import { DefaultTreeItem } from './DefaultTreeItem.js';
import { PageDecorator } from '../../../utils.js';
import { ViewSection as ViewSectionLocators, DefaultTreeSection as DefaultTreeSectionLocators } from '../../../../locators/1.73.0.js';
/**
 * Default view section
 *
 * @category Sidebar
 */
let DefaultTreeSection = class DefaultTreeSection extends TreeSection {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = ['ViewSection', 'DefaultTreeSection'];
    }
    async getVisibleItems() {
        const items = [];
        const elements = await this.itemRow$$;
        for (const element of elements) {
            items.push(
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            await new DefaultTreeItem(this.locatorMap, element, this).wait());
        }
        return items;
    }
    async findItem(label, maxLevel = 0) {
        await this.expand();
        const container = await this.rowContainer$;
        await browser.action('key').down(Key.Home).up(Key.Home).perform();
        let item;
        do {
            const temp = await container.$$(this.locatorMap.DefaultTreeItem.ctor(label));
            if (temp.length > 0) {
                const level = +await temp[0].getAttribute(this.locators.level);
                if (maxLevel < 1 || level <= maxLevel) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                    item = await new DefaultTreeItem(this.locatorMap, temp[0], this).wait();
                }
            }
            if (!item) {
                const lastrow = await container.$$(this.locators.lastRow);
                if (lastrow.length > 0) {
                    break;
                }
                await browser.action('key').down(Key.PageDown).up(Key.PageDown).perform();
            }
        } while (!item);
        return item;
    }
};
DefaultTreeSection = __decorate([
    PageDecorator({ ...ViewSectionLocators, ...DefaultTreeSectionLocators })
], DefaultTreeSection);
export { DefaultTreeSection };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmYXVsdFRyZWVTZWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3NpZGViYXIvdHJlZS9kZWZhdWx0L0RlZmF1bHRUcmVlU2VjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBRWpDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUvQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFFdEQsT0FBTyxFQUFFLGFBQWEsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQTtBQUNqRSxPQUFPLEVBQ0gsV0FBVyxJQUFJLG1CQUFtQixFQUNsQyxrQkFBa0IsSUFBSSwwQkFBMEIsRUFDbkQsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUd2Qzs7OztHQUlHO0FBRUksSUFBTSxrQkFBa0IsR0FBeEIsTUFBTSxrQkFBbUIsU0FBUSxXQUFXO0lBQTVDOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLENBQUMsYUFBc0IsRUFBRSxvQkFBNkIsQ0FBQyxDQUFBO0lBdUMvRSxDQUFDO0lBckNHLEtBQUssQ0FBQyxlQUFlO1FBQ2pCLE1BQU0sS0FBSyxHQUFlLEVBQUUsQ0FBQTtRQUM1QixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDckMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDNUIsS0FBSyxDQUFDLElBQUk7WUFDTixpRUFBaUU7WUFDakUsTUFBTSxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQWMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDMUUsQ0FBQTtTQUNKO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUUsS0FBYSxFQUFFLFFBQVEsR0FBRyxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBQ25CLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQTtRQUMxQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2pFLElBQUksSUFBMEIsQ0FBQTtRQUM5QixHQUFHO1lBQ0MsTUFBTSxJQUFJLEdBQUcsTUFBTSxTQUFTLENBQUMsRUFBRSxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLElBQWlCLENBQUMsS0FBSyxDQUFXLENBQUMsQ0FBQTtZQUNwRyxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUM5RCxJQUFJLFFBQVEsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLFFBQVEsRUFBRTtvQkFDbkMsaUVBQWlFO29CQUNqRSxJQUFJLEdBQUcsTUFBTSxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtpQkFDakY7YUFDSjtZQUNELElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1AsTUFBTSxPQUFPLEdBQUcsTUFBTSxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUE7Z0JBQ3pELElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQ3BCLE1BQUs7aUJBQ1I7Z0JBQ0QsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTthQUM1RTtTQUNKLFFBQVEsQ0FBQyxJQUFJLEVBQUM7UUFFZixPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7Q0FDSixDQUFBO0FBM0NZLGtCQUFrQjtJQUQ5QixhQUFhLENBQUMsRUFBRSxHQUFHLG1CQUFtQixFQUFFLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQztHQUM1RCxrQkFBa0IsQ0EyQzlCO1NBM0NZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtleSB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuXG5pbXBvcnQgeyBUcmVlU2VjdGlvbiB9IGZyb20gJy4uL1RyZWVTZWN0aW9uLmpzJ1xuaW1wb3J0IHsgVHJlZUl0ZW0sIEFsbFZpZXdTZWN0aW9uTG9jYXRvcnMgfSBmcm9tICcuLi8uLi8uLi9pbmRleC5qcydcbmltcG9ydCB7IERlZmF1bHRUcmVlSXRlbSB9IGZyb20gJy4vRGVmYXVsdFRyZWVJdGVtLmpzJ1xuXG5pbXBvcnQgeyBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHtcbiAgICBWaWV3U2VjdGlvbiBhcyBWaWV3U2VjdGlvbkxvY2F0b3JzLFxuICAgIERlZmF1bHRUcmVlU2VjdGlvbiBhcyBEZWZhdWx0VHJlZVNlY3Rpb25Mb2NhdG9yc1xufSBmcm9tICcuLi8uLi8uLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVmYXVsdFRyZWVTZWN0aW9uIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8QWxsVmlld1NlY3Rpb25Mb2NhdG9ycz4geyB9XG4vKipcbiAqIERlZmF1bHQgdmlldyBzZWN0aW9uXG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoeyAuLi5WaWV3U2VjdGlvbkxvY2F0b3JzLCAuLi5EZWZhdWx0VHJlZVNlY3Rpb25Mb2NhdG9ycyB9KVxuZXhwb3J0IGNsYXNzIERlZmF1bHRUcmVlU2VjdGlvbiBleHRlbmRzIFRyZWVTZWN0aW9uIHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gWydWaWV3U2VjdGlvbicgYXMgY29uc3QsICdEZWZhdWx0VHJlZVNlY3Rpb24nIGFzIGNvbnN0XVxuXG4gICAgYXN5bmMgZ2V0VmlzaWJsZUl0ZW1zICgpOiBQcm9taXNlPFRyZWVJdGVtW10+IHtcbiAgICAgICAgY29uc3QgaXRlbXM6IFRyZWVJdGVtW10gPSBbXVxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMuaXRlbVJvdyQkXG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgaXRlbXMucHVzaChcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBEZWZhdWx0VHJlZUl0ZW0odGhpcy5sb2NhdG9yTWFwLCBlbGVtZW50IGFzIGFueSwgdGhpcykud2FpdCgpXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGl0ZW1zXG4gICAgfVxuXG4gICAgYXN5bmMgZmluZEl0ZW0gKGxhYmVsOiBzdHJpbmcsIG1heExldmVsID0gMCk6IFByb21pc2U8VHJlZUl0ZW0gfCB1bmRlZmluZWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5leHBhbmQoKVxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBhd2FpdCB0aGlzLnJvd0NvbnRhaW5lciRcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5hY3Rpb24oJ2tleScpLmRvd24oS2V5LkhvbWUpLnVwKEtleS5Ib21lKS5wZXJmb3JtKClcbiAgICAgICAgbGV0IGl0ZW06IFRyZWVJdGVtIHwgdW5kZWZpbmVkXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXAgPSBhd2FpdCBjb250YWluZXIuJCQoKHRoaXMubG9jYXRvck1hcC5EZWZhdWx0VHJlZUl0ZW0uY3RvciBhcyBGdW5jdGlvbikobGFiZWwpIGFzIHN0cmluZylcbiAgICAgICAgICAgIGlmICh0ZW1wLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsZXZlbCA9ICthd2FpdCB0ZW1wWzBdLmdldEF0dHJpYnV0ZSh0aGlzLmxvY2F0b3JzLmxldmVsKVxuICAgICAgICAgICAgICAgIGlmIChtYXhMZXZlbCA8IDEgfHwgbGV2ZWwgPD0gbWF4TGV2ZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgICAgICAgICAgICAgaXRlbSA9IGF3YWl0IG5ldyBEZWZhdWx0VHJlZUl0ZW0odGhpcy5sb2NhdG9yTWFwLCB0ZW1wWzBdIGFzIGFueSwgdGhpcykud2FpdCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdHJvdyA9IGF3YWl0IGNvbnRhaW5lci4kJCh0aGlzLmxvY2F0b3JzLmxhc3RSb3cpXG4gICAgICAgICAgICAgICAgaWYgKGxhc3Ryb3cubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhd2FpdCBicm93c2VyLmFjdGlvbigna2V5JykuZG93bihLZXkuUGFnZURvd24pLnVwKEtleS5QYWdlRG93bikucGVyZm9ybSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKCFpdGVtKVxuXG4gICAgICAgIHJldHVybiBpdGVtXG4gICAgfVxufVxuIl19