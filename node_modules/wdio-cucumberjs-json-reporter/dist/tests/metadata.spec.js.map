{"version":3,"file":"metadata.spec.js","sourceRoot":"","sources":["../../lib/tests/metadata.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { CAPS_METADATA_RUNNER_STATS, FULL_RUNNER_STATS, SMALL_RUNNER_STATS, WDIO6_RUNNER_STATS } from './__mocks__/mocks';\nimport { W3CCapabilitiesExtended, WebdriverIOExtended } from '../types/wdio';\nimport { Browser } from 'webdriverio';\nimport { Metadata } from '../metadata';\nimport { NOT_KNOWN } from '../constants';\nimport { Options } from '@wdio/types';\nimport WebDriver from 'webdriver';\nimport { cjson_metadata } from '../models';\n\ndescribe( 'metadata', () => {\n    let metadataClassObject: Metadata;\n    beforeAll( () => {\n        metadataClassObject = new Metadata();\n    } );\n\n    describe( 'determineAppData', () => {\n        it( 'should return that no app metadata could be determined', () => {\n            expect( metadataClassObject.determineAppData(\n                {} as WebDriver.DesiredCapabilities,\n                {} as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n\n        it( 'should return that the app name and version based on the metadata', () => {\n            expect( metadataClassObject.determineAppData(\n                {} as WebDriver.DesiredCapabilities,\n                {\n                    app: {\n                        name: 'metadata app name',\n                        version: 'metadata version 1.2.3',\n                    },\n                } as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n\n        it( 'should return that the app name based on the config.app', () => {\n            expect( metadataClassObject.determineAppData(\n                {\n                    app: 'here/there/app.apk',\n                } as WebDriver.DesiredCapabilities,\n                {} as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n    } );\n\n    describe( 'determineBrowserData', () => {\n        it( 'should return that no browser metadata could be determined', () => {\n            expect( metadataClassObject.determineBrowserData(\n                {} as WebDriver.DesiredCapabilities,\n                {} as WebDriver.DesiredCapabilities,\n                {} as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n\n        it( 'should return that the browser name and version based on the metadata', () => {\n            expect( metadataClassObject.determineBrowserData(\n                {} as WebDriver.DesiredCapabilities,\n                {} as WebDriver.DesiredCapabilities,\n                {\n                    browser: {\n                        name: 'metadata browser name',\n                        version: 'metadata version 1.2.3',\n                    },\n                } as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n\n        it( 'should return that the browser name and version based on the capabilities when version is used', () => {\n            expect( metadataClassObject.determineBrowserData(\n                {\n                    browserName: 'capabilities browser name',\n                    version: 'capabilities version',\n                } as WebDriver.DesiredCapabilities,\n                {} as WebDriver.DesiredCapabilities,\n                {} as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n\n        it( 'should return that the browser name and version based on the capabilities when browserVersion is used', () => {\n            expect( metadataClassObject.determineBrowserData(\n                {\n                    browserName: 'capabilities browser name',\n                    browserVersion: 'capabilities browserVersion',\n                } as WebDriver.DesiredCapabilities,\n                {} as WebDriver.DesiredCapabilities,\n                {} as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n\n        it( 'should return that the browser name and version based on the configCapabilities', () => {\n            expect( metadataClassObject.determineBrowserData(\n                {} as WebDriver.DesiredCapabilities,\n                {\n                    browserName: 'configCapabilities browser name',\n                    browserVersion: 'configCapabilities browser version',\n                } as WebDriver.DesiredCapabilities,\n                {} as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n    } );\n\n    describe( 'determineDeviceName', () => {\n        it( 'should be able to return the device metadata based on the metadata.device', () => {\n            expect( metadataClassObject.determineDeviceName( { device: 'metadata.device' } as cjson_metadata, {} as WebDriver.DesiredCapabilities ) ).toMatchSnapshot();\n        } );\n\n        it( 'should be able to return the device metadata based on the current.config.capabilities.deviceName', () => {\n            expect(\n                metadataClassObject.determineDeviceName( {} as cjson_metadata, { deviceName: 'current.config.capabilities.deviceName' } as WebDriver.DesiredCapabilities ),\n            ).toMatchSnapshot();\n        } );\n\n        it( 'should be able to return the not known deviceName', () => {\n            expect( metadataClassObject.determineDeviceName( {} as cjson_metadata, {} as WebDriver.DesiredCapabilities ) ).toMatchSnapshot();\n        } );\n    } );\n\n    describe( 'determinePlatformName', () => {\n        it( 'should be able to return the platform name based on the metadata.platform', () => {\n            expect( metadataClassObject.determinePlatformName(\n                {\n                    platform: {\n                        name: 'platform.name',\n                    },\n                } as cjson_metadata,\n                {} as WebDriver.DesiredCapabilities,\n            ) ).toMatchSnapshot();\n        } );\n\n        it( 'should be able to return the platform name based on the currentCapabilities.platformName', () => {\n            expect(\n                metadataClassObject.determinePlatformName( {} as cjson_metadata, { platformName: 'currentCapabilities.platformName' } as WebDriver.DesiredCapabilities ),\n            ).toMatchSnapshot();\n        } );\n\n        it( 'should be able to return the platform name based on the currentCapabilities.platformName for mac properly', () => {\n            expect(\n                metadataClassObject.determinePlatformName( {} as cjson_metadata, { platformName: 'mac' } as WebDriver.DesiredCapabilities ),\n            ).toMatchSnapshot();\n        } );\n\n        it( 'should be able to return the platform name based on the currentCapabilities.platformName for windows properly', () => {\n            expect(\n                metadataClassObject.determinePlatformName( {} as cjson_metadata, { platformName: 'windows nt' } as WebDriver.DesiredCapabilities ),\n            ).toMatchSnapshot();\n        } );\n\n        it( 'should be able to return the not known platform name', () => {\n            expect( metadataClassObject.determinePlatformName( {} as cjson_metadata, {} as WebDriver.DesiredCapabilities ) ).toMatchSnapshot();\n        } );\n    } );\n\n    describe( 'determinePlatformVersion', () => {\n        it( 'should be able to return the platform version based on the metadata.platform', () => {\n            expect( metadataClassObject.determinePlatformVersion(\n                {\n                    platform: {\n                        version: 'platform.version',\n                    },\n                } as cjson_metadata,\n            ) ).toMatchSnapshot();\n        } );\n        it( 'should be able to return the platform version based on the metadata.platform from desired capabilities', () => {\n            expect( metadataClassObject.determinePlatformVersion(\n                {\n                    platform: {\n                        version: undefined,\n                    },\n                } as cjson_metadata, { platformVersion: '10.1' } as WebDriver.DesiredCapabilities ) ).toMatchSnapshot();\n        } );\n\n        it( 'should be able to return the not known platform version', () => {\n            expect( metadataClassObject.determinePlatformVersion( {} as cjson_metadata ) ).toMatchSnapshot();\n        } );\n    } );\n\n    describe( 'determineMetadata', () => {\n        let determineAppDataSpy: jest.SpyInstance; let determineBrowserDataSpy: jest.SpyInstance; let determineDeviceNameSpy: jest.SpyInstance; let determinePlatformNameSpy: jest.SpyInstance;\n        let determinePlatformVersionSpy;\n        const appMockData = {\n            app: {\n                name: 'mock-appName',\n                version: 'mock-appVersion',\n            },\n        };\n        const browserMockData = {\n            browser: {\n                name: 'mock-browserName',\n                version: 'mock-browserVersion',\n            },\n        };\n\n        beforeEach( () => {\n            delete global.browser;\n            global.browser = {\n                options: {\n                    requestedCapabilities: {\n                        w3cCaps: {\n                            alwaysMatch: {\n                                foo: true,\n                            }\n                        }\n                    },\n                } as WebdriverIOExtended,\n            } as Browser<'sync'>;\n            determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineAppData' );\n            determineBrowserDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n            determineDeviceNameSpy = jest.spyOn( metadataClassObject, 'determineDeviceName' ).mockReturnValue( NOT_KNOWN );\n            determinePlatformNameSpy = jest.spyOn( metadataClassObject, 'determinePlatformName' ).mockReturnValue( NOT_KNOWN );\n            determinePlatformVersionSpy = jest.spyOn( metadataClassObject, 'determinePlatformVersion' ).mockReturnValue( NOT_KNOWN );\n        } );\n\n        afterEach( () => {\n            jest.clearAllMocks();\n            delete global.browser;\n        } );\n\n        it( 'should return app metadata based on the currentCapabilities.app', () => {\n            ( FULL_RUNNER_STATS.capabilities as W3CCapabilitiesExtended ).app = 'current.config.capabilities.app';\n\n            determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineAppData' ).mockReturnValue( appMockData );\n\n            expect( metadataClassObject.determineMetadata( FULL_RUNNER_STATS ) ).toMatchSnapshot();\n\n            expect( determineAppDataSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n\n            delete ( FULL_RUNNER_STATS.capabilities as W3CCapabilitiesExtended ).app;\n            determineAppDataSpy.mockClear();\n        } );\n\n        it( 'should return app metadata based on the current.config.capabilities[\\'cjson:metadata\\'].app', () => {\n            ( FULL_RUNNER_STATS.capabilities as W3CCapabilitiesExtended ).cjson_metadata.app = {\n                'name': 'mock-appName',\n                'version': 'mock-appVersion',\n            };\n\n            determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineAppData' ).mockReturnValue( appMockData );\n\n            expect( metadataClassObject.determineMetadata( FULL_RUNNER_STATS ) ).toMatchSnapshot();\n\n            expect( determineAppDataSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n\n            delete ( FULL_RUNNER_STATS.capabilities as W3CCapabilitiesExtended ).cjson_metadata.app;\n            determineAppDataSpy.mockClear();\n        } );\n\n        it( 'should return metadata based on the data.config.capabilities[\"cjson:metadata\"]', () => {\n            global.browser = {\n                options: {\n                    capabilities: {},\n                } as Options.WebdriverIO,\n            } as Browser<'sync'>;\n\n            determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n\n            expect( metadataClassObject.determineMetadata( CAPS_METADATA_RUNNER_STATS ) ).toMatchSnapshot();\n            determineAppDataSpy.mockClear();\n        } );\n\n        it( 'should return metadata based on the requestedCapabilities.w3cCaps.alwaysMatch', () => {\n            global.browser = {\n                options: {\n                    capabilities: {},\n                    requestedCapabilities: {\n                        w3cCaps: {\n                            alwaysMatch: {\n                                'cjson_metadata': {},\n                            },\n                        },\n                    },\n                } as Options.WebdriverIO,\n            } as Browser<'sync'>;\n\n            determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n\n            expect( metadataClassObject.determineMetadata( WDIO6_RUNNER_STATS ) ).toMatchSnapshot();\n            determineAppDataSpy.mockClear();\n        } );\n\n        it( 'should return metadata based on the browser.options.capabilities if w3cCaps is empty', () => {\n            global.browser = {\n                options: {\n                    requestedCapabilities: {\n                        w3cCaps: {\n\n                        }\n                    },\n                    capabilities: {\n                        browserName: 'chrome',\n                        'cjson_metadata': {},\n                    }\n                } as WebdriverIOExtended,\n            } as Browser<'sync'>;\n\n            determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n\n            expect( metadataClassObject.determineMetadata( WDIO6_RUNNER_STATS ) ).toMatchSnapshot();\n            determineAppDataSpy.mockClear();\n        } );\n\n        it( 'should return metadata based on the browser.options.capabilities', () => {\n            global.browser = {\n                options: {\n                    capabilities: {\n                        browserName: 'chrome',\n                        'cjson_metadata': {},\n                    },\n                } as WebdriverIOExtended,\n\n            } as Browser<'sync'>;\n\n            determineAppDataSpy = jest.spyOn( metadataClassObject, 'determineBrowserData' ).mockReturnValue( browserMockData );\n\n            expect( metadataClassObject.determineMetadata( WDIO6_RUNNER_STATS ) ).toMatchSnapshot();\n            determineAppDataSpy.mockClear();\n        } );\n\n        it( 'should call determineBrowserData when there is no way to  determine the app data', () => {\n            metadataClassObject.determineMetadata( SMALL_RUNNER_STATS );\n\n            expect( determineAppDataSpy ).toHaveBeenCalledTimes( 0 );\n            expect( determineBrowserDataSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n        } );\n\n        it( 'should be able to return browser metadata', () => {\n            expect( metadataClassObject.determineMetadata( SMALL_RUNNER_STATS ) ).toMatchSnapshot();\n\n            expect( determineBrowserDataSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determineDeviceNameSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determinePlatformNameSpy ).toHaveBeenCalledTimes( 1 );\n            expect( determinePlatformVersionSpy ).toHaveBeenCalledTimes( 1 );\n        } );\n    } );\n} );\n"]}