var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { DebugConsoleView, OutputView, TerminalView, ProblemsView, EditorView, TitleBar, StatusBar } from '../index.js';
import { BasePage, PageDecorator } from '../utils.js';
import { BottomBarPanel as BottomBarPanelLocators } from '../../locators/1.73.0.js';
/**
 * Page object for the bottom view panel
 *
 * ```ts
 * const bottomBar = workbench.getBottomBar()
 * await bottomBar.toggle(true)
 * ```
 *
 * @category BottomBar
 */
let BottomBarPanel = class BottomBarPanel extends BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'BottomBarPanel';
    }
    /**
     * Open/Close the bottom bar panel
     * @param open true to open. false to close
     * @returns Promise resolving when the view visibility is toggled
     */
    async toggle(open) {
        try {
            const tab = await new EditorView(this.locatorMap).getActiveTab();
            await tab?.elem.click();
        }
        catch (err) {
            // ignore and move on
        }
        const height = await this.elem.getSize('height');
        if ((open && height === 0) || (!open && height > 0)) {
            const statusBar = new StatusBar(this.locatorMap);
            await statusBar.problems$.click();
            if (open) {
                await this.wait();
                return;
            }
            /**
             * we might have to click again if we were on a different tab
             * than the problems tab
             */
            if (await this.elem.isDisplayed()) {
                await statusBar.problems$.click();
            }
            await this.elem.waitForDisplayed({ reverse: true });
        }
    }
    /**
     * Open the Problems view in the bottom panel
     * @returns Promise resolving to a ProblemsView object
     */
    async openProblemsView() {
        await this.openTab(this.locators.problemsTab);
        return new ProblemsView(this.locatorMap, this).wait();
    }
    /**
     * Open the Output view in the bottom panel
     * @returns Promise resolving to OutputView object
     */
    async openOutputView() {
        await this.openTab(this.locators.outputTab);
        return new OutputView(this.locatorMap, this).wait();
    }
    /**
     * Open the Debug Console view in the bottom panel
     * @returns Promise resolving to DebugConsoleView object
     */
    async openDebugConsoleView() {
        await this.openTab(this.locators.debugTab);
        return new DebugConsoleView(this.locatorMap, this).wait();
    }
    /**
     * Open the Terminal view in the bottom panel
     * @returns Promise resolving to TerminalView object
     */
    async openTerminalView() {
        await this.openTab(this.locators.terminalTab);
        return new TerminalView(this.locatorMap, this).wait();
    }
    /**
     * Maximize the the bottom panel if not maximized
     * @returns Promise resolving when the maximize button is pressed
     */
    async maximize() {
        await this.resize(this.locators.maximize);
    }
    /**
     * Restore the the bottom panel if maximized
     * @returns Promise resolving when the restore button is pressed
     */
    async restore() {
        await this.resize(this.locators.restore);
    }
    async openTab(title) {
        await this.toggle(true);
        const tabContainer = await this.tabContainer$;
        try {
            const tabs = await tabContainer.$$(this.locators.tab(title));
            if (tabs.length > 0) {
                await tabs[0].click();
            }
            else {
                const label = await tabContainer.$(`.//a[starts-with(@aria-label, '${title}')]`);
                await label.click();
            }
        }
        catch (err) {
            await new TitleBar(this.locatorMap).select('View', title);
        }
    }
    async resize(label) {
        await this.toggle(true);
        let action;
        try {
            action = await this.elem
                .$(this.locators.globalActions)
                .$(this.locators.action(label));
        }
        catch (err) {
            // the panel is already maximized
        }
        if (action) {
            await action.click();
        }
    }
};
BottomBarPanel = __decorate([
    PageDecorator(BottomBarPanelLocators)
], BottomBarPanel);
export { BottomBarPanel };
//# sourceMappingURL=data:application/json;base64,