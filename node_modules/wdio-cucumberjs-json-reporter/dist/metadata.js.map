{"version":3,"file":"metadata.js","sourceRoot":"","sources":["../lib/metadata.ts"],"names":[],"mappings":"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","sourcesContent":["import { AppData, BrowserData, MetadataObject, cjson_metadata } from './models';\nimport { DesiredCapabilitiesExtended, RunnerStatsExtended, W3CCapabilitiesExtended, WebdriverIOExtended } from './types/wdio';\nimport { Browser } from 'webdriverio';\nimport { NOT_KNOWN } from './constants';\nimport WebDriver from 'webdriver';\n\nexport class Metadata {\n    /**\n     * Determine the metadata that needs to be added\n     */\n    public determineMetadata ( data: RunnerStatsExtended ): MetadataObject {\n        let instanceData: AppData | BrowserData;\n        const currentCapabilities = data.capabilities as W3CCapabilitiesExtended;\n        const optsCaps = ( browser as Browser<'async'> ).options.capabilities as W3CCapabilitiesExtended;\n        const currentConfigCapabilities = data?.capabilities as DesiredCapabilitiesExtended;\n        const w3cCaps: cjson_metadata = Object.prototype.hasOwnProperty.call( data.config.capabilities, 'cjson:metadata' )\n            // Fixes: https://github.com/webdriverio-community/wdio-cucumberjs-json-reporter/issues/73\n            ? data.config.capabilities['cjson:metadata'] as cjson_metadata\n            // Fallback\n            : ( ( browser as Browser<'async'> ).options as WebdriverIOExtended )?.requestedCapabilities?.cjson_metadata;\n        const metadata: cjson_metadata = ( currentConfigCapabilities as W3CCapabilitiesExtended )?.cjson_metadata\n            || w3cCaps // When an app is used to test\n            || ( optsCaps as DesiredCapabilitiesExtended )?.cjson_metadata // devtools\n            || {} as cjson_metadata;\n\n        // When an app is used to test\n        // eslint-disable-next-line @typescript-eslint/tslint/config\n        if ( currentConfigCapabilities?.app || metadata?.app ) {\n            instanceData = this.determineAppData( currentConfigCapabilities, metadata );\n        } else {\n            // Then a browser\n            instanceData = this.determineBrowserData( currentCapabilities, currentConfigCapabilities, metadata );\n        }\n\n        return <MetadataObject>{\n            ...instanceData,\n            device: this.determineDeviceName( metadata, currentConfigCapabilities ),\n            platform: {\n                name: this.determinePlatformName( metadata, currentCapabilities ),\n                version: this.determinePlatformVersion( metadata, currentCapabilities ),\n            },\n        };\n    }\n\n    /**\n     * Determine the device name\n     */\n    public determineDeviceName ( metadata: cjson_metadata, currentConfigCapabilities: WebDriver.DesiredCapabilities ): string {\n        return ( metadata?.device || currentConfigCapabilities?.deviceName || `Device name ${NOT_KNOWN}` );\n    }\n\n    /**\n     * Determine the platform name\n     */\n    public determinePlatformName ( metadata: cjson_metadata, currentCapabilities: WebDriver.DesiredCapabilities ): string {\n        const currentPlatformName = currentCapabilities?.platformName\n            ? currentCapabilities?.platformName.includes( 'mac' )\n                ? 'osx'\n                : currentCapabilities.platformName.includes( 'windows' )\n                    ? 'windows'\n                    : currentCapabilities?.platformName\n            : `Platform name ${NOT_KNOWN}`;\n        return ( metadata.platform && metadata?.platform?.name )\n            ? metadata.platform?.name\n            : currentPlatformName;\n    }\n\n    /**\n     * Determine the platform version\n     */\n    public determinePlatformVersion( metadata: cjson_metadata, currentCapabilities?: WebDriver.DesiredCapabilities ): string {\n        if ( metadata && metadata.platform && metadata.platform?.version ) {\n            return metadata.platform.version;\n        }\n        if ( currentCapabilities?.platformVersion ) {\n            return currentCapabilities.platformVersion;\n        }\n        return `Version ${NOT_KNOWN}`;\n    }\n\n    /**\n     * Determine the app data\n     */\n    public determineAppData ( currentConfigCapabilities: DesiredCapabilitiesExtended, metadata: cjson_metadata ): AppData {\n        const metaAppName: string = ( metadata?.app && metadata.app?.name ) ? metadata?.app?.name : 'No metadata.app.name available';\n        const metaAppVersion: string = ( metadata?.app && metadata.app.version ) ? metadata.app.version : 'No metadata.app.version available';\n        const appPath = currentConfigCapabilities.app || metaAppName;\n        const appName = appPath.substring( appPath.replace( '\\\\', '/' ).lastIndexOf( '/' ) ).replace( '/', '' );\n\n        return {\n            app: {\n                name: appName,\n                version: metaAppVersion,\n            },\n        };\n    }\n\n    /**\n     * Determine the browser data\n     */\n    public determineBrowserData ( currentCapabilities: WebDriver.DesiredCapabilities, currentConfigCapabilities: WebDriver.DesiredCapabilities, metadata: cjson_metadata ): BrowserData {\n        const browserName = currentCapabilities?.browserName\n            || currentConfigCapabilities?.browserName\n            || ( ( metadata && metadata?.browser && metadata.browser?.name ) ? metadata?.browser?.name : 'No metadata.browser.name available' );\n        const browserVersion = currentCapabilities?.version\n            || currentCapabilities?.browserVersion\n            || currentConfigCapabilities?.browserVersion\n            || ( ( metadata && metadata?.browser && metadata?.browser?.version ) ? metadata?.browser?.version : 'No metadata.browser.version available' );\n\n        return <BrowserData>{\n            browser: {\n                name: browserName,\n                version: browserVersion,\n            }\n        };\n    }\n}\n"]}