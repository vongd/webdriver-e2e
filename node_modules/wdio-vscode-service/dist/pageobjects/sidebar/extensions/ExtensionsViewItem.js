var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { ViewItem } from '../ViewItem.js';
import { PageDecorator } from '../../utils.js';
import { TreeItem as TreeItemLocators, ExtensionsViewItem as ExtensionsViewItemLocators } from '../../../locators/1.73.0.js';
/**
 * Page object representing an extension in the extensions view
 *
 * @category Sidebar
 */
let ExtensionsViewItem = class ExtensionsViewItem extends ViewItem {
    constructor(locators, extensionElement, section) {
        super(locators, extensionElement, section.elem);
        this.section = section;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'ExtensionsViewItem'];
    }
    /**
     * Get title of the extension
     */
    async getTitle() {
        return this.itemTitle$.getText();
    }
    /**
     * Get version of the extension
     * @returns Promise resolving to version string
     */
    async getVersion() {
        const version = await this.version$$;
        if (version.length > 0) {
            return version[0].getText();
        }
        const label = await this.elem.getAttribute('aria-label');
        const ver = label.split(',')[1].trim();
        return ver;
    }
    /**
     * Get the author of the extension
     * @returns Promise resolving to displayed author
     */
    async getAuthor() {
        const author = await this.author$;
        return author.getText();
    }
    /**
     * Get the description of the extension
     * @returns Promise resolving to description
     */
    async getDescription() {
        return this.description$.getText();
    }
    /**
     * Find if the extension is installed
     * @returns Promise resolving to true/false
     */
    async isInstalled() {
        if ((await this.install$.getAttribute('class')).indexOf('disabled') > -1) {
            return true;
        }
        return false;
    }
    /**
     * Open the management context menu if the extension is installed
     * @returns Promise resolving to ContextMenu object
     */
    async manage() {
        if ((await this.manage$.getAttribute('class')).indexOf('disabled') > -1) {
            throw new Error(`Extension '${await this.getTitle()}' is not installed`);
        }
        return this.openContextMenu();
    }
    /**
     * Install the extension if not installed already.
     *
     * Will wait for the extension to finish installing. To skip the wait, set timeout to 0.
     *
     * @param timeout timeout to wait for the installation in milliseconds, default unlimited, set to 0 to skip waiting
     * @returns Promise resolving when the installation finishes or is skipped
     */
    async install(timeout = 300000) {
        if (await this.isInstalled()) {
            return;
        }
        const button = await this.install$;
        await button.click();
        if (timeout > 0) {
            await this.manage$.waitForDisplayed({ timeout });
        }
    }
};
ExtensionsViewItem = __decorate([
    PageDecorator({ ...TreeItemLocators, ...ExtensionsViewItemLocators })
], ExtensionsViewItem);
export { ExtensionsViewItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXh0ZW5zaW9uc1ZpZXdJdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3NpZGViYXIvZXh0ZW5zaW9ucy9FeHRlbnNpb25zVmlld0l0ZW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsT0FBTyxFQUFFLFFBQVEsRUFBb0IsTUFBTSxnQkFBZ0IsQ0FBQTtBQUkzRCxPQUFPLEVBQUUsYUFBYSxFQUFvQyxNQUFNLGdCQUFnQixDQUFBO0FBQ2hGLE9BQU8sRUFDSCxRQUFRLElBQUksZ0JBQWdCLEVBQzVCLGtCQUFrQixJQUFJLDBCQUEwQixFQUNuRCxNQUFNLDZCQUE2QixDQUFBO0FBR3BDOzs7O0dBSUc7QUFFSSxJQUFNLGtCQUFrQixHQUF4QixNQUFNLGtCQUFtQixTQUFRLFFBQVE7SUFNNUMsWUFDSSxRQUEwQixFQUMxQixnQkFBOEQsRUFDdkQsT0FBOEI7UUFFckMsS0FBSyxDQUFDLFFBQVEsRUFBRSxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUE7UUFGeEMsWUFBTyxHQUFQLE9BQU8sQ0FBdUI7UUFSekM7O1dBRUc7UUFDSSxlQUFVLEdBQUcsQ0FBQyxVQUFtQixFQUFFLG9CQUE2QixDQUFDLENBQUE7SUFReEUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsS0FBSyxDQUFDLFFBQVE7UUFDVixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDcEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxVQUFVO1FBQ1osTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFBO1FBQ3BDLElBQUksT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDcEIsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUE7U0FDOUI7UUFDRCxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3hELE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7UUFFdEMsT0FBTyxHQUFHLENBQUE7SUFDZCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFNBQVM7UUFDWCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUE7UUFDakMsT0FBTyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUE7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxjQUFjO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUN0QyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFdBQVc7UUFDYixJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUN0RSxPQUFPLElBQUksQ0FBQTtTQUNkO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyxNQUFNO1FBQ1IsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDckUsTUFBTSxJQUFJLEtBQUssQ0FBQyxjQUFjLE1BQU0sSUFBSSxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsQ0FBQyxDQUFBO1NBQzNFO1FBQ0QsT0FBTyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUE7SUFDakMsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxLQUFLLENBQUMsT0FBTyxDQUFFLE9BQU8sR0FBRyxNQUFNO1FBQzNCLElBQUksTUFBTSxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDMUIsT0FBTTtTQUNUO1FBQ0QsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFBO1FBQ2xDLE1BQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO1FBRXBCLElBQUksT0FBTyxHQUFHLENBQUMsRUFBRTtZQUNiLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDbkQ7SUFDTCxDQUFDO0NBQ0osQ0FBQTtBQTlGWSxrQkFBa0I7SUFEOUIsYUFBYSxDQUFDLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSxHQUFHLDBCQUEwQixFQUFFLENBQUM7R0FDekQsa0JBQWtCLENBOEY5QjtTQTlGWSxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENoYWluYWJsZVByb21pc2VFbGVtZW50IH0gZnJvbSAnd2ViZHJpdmVyaW8nXG5cbmltcG9ydCB7IFZpZXdJdGVtLCBWaWV3SXRlbUxvY2F0b3JzIH0gZnJvbSAnLi4vVmlld0l0ZW0uanMnXG5pbXBvcnQgeyBDb250ZXh0TWVudSB9IGZyb20gJy4uLy4uL21lbnUvQ29udGV4dE1lbnUuanMnXG5pbXBvcnQgeyBFeHRlbnNpb25zVmlld1NlY3Rpb24gfSBmcm9tICcuL0V4dGVuc2lvbnNWaWV3U2VjdGlvbi5qcydcblxuaW1wb3J0IHsgUGFnZURlY29yYXRvciwgSVBhZ2VEZWNvcmF0b3IsIFZTQ29kZUxvY2F0b3JNYXAgfSBmcm9tICcuLi8uLi91dGlscy5qcydcbmltcG9ydCB7XG4gICAgVHJlZUl0ZW0gYXMgVHJlZUl0ZW1Mb2NhdG9ycyxcbiAgICBFeHRlbnNpb25zVmlld0l0ZW0gYXMgRXh0ZW5zaW9uc1ZpZXdJdGVtTG9jYXRvcnNcbn0gZnJvbSAnLi4vLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEV4dGVuc2lvbnNWaWV3SXRlbSBleHRlbmRzIElQYWdlRGVjb3JhdG9yPFZpZXdJdGVtTG9jYXRvcnM+IHsgfVxuLyoqXG4gKiBQYWdlIG9iamVjdCByZXByZXNlbnRpbmcgYW4gZXh0ZW5zaW9uIGluIHRoZSBleHRlbnNpb25zIHZpZXdcbiAqXG4gKiBAY2F0ZWdvcnkgU2lkZWJhclxuICovXG5AUGFnZURlY29yYXRvcih7IC4uLlRyZWVJdGVtTG9jYXRvcnMsIC4uLkV4dGVuc2lvbnNWaWV3SXRlbUxvY2F0b3JzIH0pXG5leHBvcnQgY2xhc3MgRXh0ZW5zaW9uc1ZpZXdJdGVtIGV4dGVuZHMgVmlld0l0ZW0ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSBbJ1RyZWVJdGVtJyBhcyBjb25zdCwgJ0V4dGVuc2lvbnNWaWV3SXRlbScgYXMgY29uc3RdXG5cbiAgICBjb25zdHJ1Y3RvciAoXG4gICAgICAgIGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwLFxuICAgICAgICBleHRlbnNpb25FbGVtZW50OiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PixcbiAgICAgICAgcHVibGljIHNlY3Rpb246IEV4dGVuc2lvbnNWaWV3U2VjdGlvblxuICAgICkge1xuICAgICAgICBzdXBlcihsb2NhdG9ycywgZXh0ZW5zaW9uRWxlbWVudCwgc2VjdGlvbi5lbGVtKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aXRsZSBvZiB0aGUgZXh0ZW5zaW9uXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VGl0bGUgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1UaXRsZSQuZ2V0VGV4dCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHZlcnNpb24gb2YgdGhlIGV4dGVuc2lvblxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHZlcnNpb24gc3RyaW5nXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VmVyc2lvbiAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgdmVyc2lvbiA9IGF3YWl0IHRoaXMudmVyc2lvbiQkXG4gICAgICAgIGlmICh2ZXJzaW9uLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uWzBdLmdldFRleHQoKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxhYmVsID0gYXdhaXQgdGhpcy5lbGVtLmdldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcpXG4gICAgICAgIGNvbnN0IHZlciA9IGxhYmVsLnNwbGl0KCcsJylbMV0udHJpbSgpXG5cbiAgICAgICAgcmV0dXJuIHZlclxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgYXV0aG9yIG9mIHRoZSBleHRlbnNpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBkaXNwbGF5ZWQgYXV0aG9yXG4gICAgICovXG4gICAgYXN5bmMgZ2V0QXV0aG9yICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBhdXRob3IgPSBhd2FpdCB0aGlzLmF1dGhvciRcbiAgICAgICAgcmV0dXJuIGF1dGhvci5nZXRUZXh0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBleHRlbnNpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBkZXNjcmlwdGlvblxuICAgICAqL1xuICAgIGFzeW5jIGdldERlc2NyaXB0aW9uICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXNjcmlwdGlvbiQuZ2V0VGV4dCgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCBpZiB0aGUgZXh0ZW5zaW9uIGlzIGluc3RhbGxlZFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIHRydWUvZmFsc2VcbiAgICAgKi9cbiAgICBhc3luYyBpc0luc3RhbGxlZCAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGlmICgoYXdhaXQgdGhpcy5pbnN0YWxsJC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLmluZGV4T2YoJ2Rpc2FibGVkJykgPiAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcGVuIHRoZSBtYW5hZ2VtZW50IGNvbnRleHQgbWVudSBpZiB0aGUgZXh0ZW5zaW9uIGlzIGluc3RhbGxlZFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIENvbnRleHRNZW51IG9iamVjdFxuICAgICAqL1xuICAgIGFzeW5jIG1hbmFnZSAoKTogUHJvbWlzZTxDb250ZXh0TWVudT4ge1xuICAgICAgICBpZiAoKGF3YWl0IHRoaXMubWFuYWdlJC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykpLmluZGV4T2YoJ2Rpc2FibGVkJykgPiAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHRlbnNpb24gJyR7YXdhaXQgdGhpcy5nZXRUaXRsZSgpfScgaXMgbm90IGluc3RhbGxlZGApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMub3BlbkNvbnRleHRNZW51KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnN0YWxsIHRoZSBleHRlbnNpb24gaWYgbm90IGluc3RhbGxlZCBhbHJlYWR5LlxuICAgICAqXG4gICAgICogV2lsbCB3YWl0IGZvciB0aGUgZXh0ZW5zaW9uIHRvIGZpbmlzaCBpbnN0YWxsaW5nLiBUbyBza2lwIHRoZSB3YWl0LCBzZXQgdGltZW91dCB0byAwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHRpbWVvdXQgdGltZW91dCB0byB3YWl0IGZvciB0aGUgaW5zdGFsbGF0aW9uIGluIG1pbGxpc2Vjb25kcywgZGVmYXVsdCB1bmxpbWl0ZWQsIHNldCB0byAwIHRvIHNraXAgd2FpdGluZ1xuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gdGhlIGluc3RhbGxhdGlvbiBmaW5pc2hlcyBvciBpcyBza2lwcGVkXG4gICAgICovXG4gICAgYXN5bmMgaW5zdGFsbCAodGltZW91dCA9IDMwMDAwMCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoYXdhaXQgdGhpcy5pc0luc3RhbGxlZCgpKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidXR0b24gPSBhd2FpdCB0aGlzLmluc3RhbGwkXG4gICAgICAgIGF3YWl0IGJ1dHRvbi5jbGljaygpXG5cbiAgICAgICAgaWYgKHRpbWVvdXQgPiAwKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1hbmFnZSQud2FpdEZvckRpc3BsYXllZCh7IHRpbWVvdXQgfSlcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==