var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Editor } from './Editor.js';
import { TextEditor } from './TextEditor.js';
import { EditorView } from './EditorView.js';
import { PageDecorator } from '../utils.js';
import { DiffEditor as DiffEditorLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing a diff editor
 *
 * @category Editor
 */
let DiffEditor = class DiffEditor extends Editor {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'DiffEditor';
    }
    /**
     * Gets the text editor corresponding to the originalside.
     * (The left side of the diff editor)
     * @returns Promise resolving to TextEditor object
     */
    getOriginalEditor() {
        const element = this.view.elem.$(this.locators.originalEditor);
        return new TextEditor(this.locatorMap, element, new EditorView(this.locatorMap)).wait();
    }
    /**
     * Gets the text editor corresponding to the modified side.
     * (The right side of the diff editor)
     * @returns Promise resolving to TextEditor object
     */
    async getModifiedEditor() {
        const element = this.view.elem.$(this.locators.modifiedEditor);
        return new TextEditor(this.locatorMap, element, new EditorView(this.locatorMap)).wait();
    }
};
DiffEditor = __decorate([
    PageDecorator(DiffEditorLocators)
], DiffEditor);
export { DiffEditor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlmZkVkaXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy9lZGl0b3IvRGlmZkVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFrQixNQUFNLGFBQWEsQ0FBQTtBQUNwRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQzVDLE9BQU8sRUFBRSxhQUFhLEVBQWtCLE1BQU0sYUFBYSxDQUFBO0FBQzNELE9BQU8sRUFBRSxVQUFVLElBQUksa0JBQWtCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUczRTs7OztHQUlHO0FBRUksSUFBTSxVQUFVLEdBQWhCLE1BQU0sVUFBVyxTQUFRLE1BQXNCO0lBQS9DOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLFlBQXFCLENBQUE7SUE2QjdDLENBQUM7SUEzQkc7Ozs7T0FJRztJQUNILGlCQUFpQjtRQUNiLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBQzlELE9BQU8sSUFBSSxVQUFVLENBQ2pCLElBQUksQ0FBQyxVQUFVLEVBQ2YsT0FBTyxFQUNQLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FDbEMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNaLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsS0FBSyxDQUFDLGlCQUFpQjtRQUNuQixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQTtRQUM5RCxPQUFPLElBQUksVUFBVSxDQUNqQixJQUFJLENBQUMsVUFBVSxFQUNmLE9BQU8sRUFDUCxJQUFJLFVBQVUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQ2xDLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDWixDQUFDO0NBQ0osQ0FBQTtBQWpDWSxVQUFVO0lBRHRCLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQztHQUNyQixVQUFVLENBaUN0QjtTQWpDWSxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWRpdG9yLCBFZGl0b3JMb2NhdG9ycyB9IGZyb20gJy4vRWRpdG9yLmpzJ1xuaW1wb3J0IHsgVGV4dEVkaXRvciB9IGZyb20gJy4vVGV4dEVkaXRvci5qcydcbmltcG9ydCB7IEVkaXRvclZpZXcgfSBmcm9tICcuL0VkaXRvclZpZXcuanMnXG5pbXBvcnQgeyBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciB9IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgRGlmZkVkaXRvciBhcyBEaWZmRWRpdG9yTG9jYXRvcnMgfSBmcm9tICcuLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgRGlmZkVkaXRvciBleHRlbmRzIElQYWdlRGVjb3JhdG9yPEVkaXRvckxvY2F0b3JzPiB7fVxuLyoqXG4gKiBQYWdlIG9iamVjdCByZXByZXNlbnRpbmcgYSBkaWZmIGVkaXRvclxuICpcbiAqIEBjYXRlZ29yeSBFZGl0b3JcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoRGlmZkVkaXRvckxvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIERpZmZFZGl0b3IgZXh0ZW5kcyBFZGl0b3I8RWRpdG9yTG9jYXRvcnM+IHtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHB1YmxpYyBsb2NhdG9yS2V5ID0gJ0RpZmZFZGl0b3InIGFzIGNvbnN0XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB0ZXh0IGVkaXRvciBjb3JyZXNwb25kaW5nIHRvIHRoZSBvcmlnaW5hbHNpZGUuXG4gICAgICogKFRoZSBsZWZ0IHNpZGUgb2YgdGhlIGRpZmYgZWRpdG9yKVxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIFRleHRFZGl0b3Igb2JqZWN0XG4gICAgICovXG4gICAgZ2V0T3JpZ2luYWxFZGl0b3IgKCk6IFByb21pc2U8VGV4dEVkaXRvcj4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy52aWV3LmVsZW0uJCh0aGlzLmxvY2F0b3JzLm9yaWdpbmFsRWRpdG9yKVxuICAgICAgICByZXR1cm4gbmV3IFRleHRFZGl0b3IoXG4gICAgICAgICAgICB0aGlzLmxvY2F0b3JNYXAsXG4gICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgbmV3IEVkaXRvclZpZXcodGhpcy5sb2NhdG9yTWFwKVxuICAgICAgICApLndhaXQoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRleHQgZWRpdG9yIGNvcnJlc3BvbmRpbmcgdG8gdGhlIG1vZGlmaWVkIHNpZGUuXG4gICAgICogKFRoZSByaWdodCBzaWRlIG9mIHRoZSBkaWZmIGVkaXRvcilcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBUZXh0RWRpdG9yIG9iamVjdFxuICAgICAqL1xuICAgIGFzeW5jIGdldE1vZGlmaWVkRWRpdG9yICgpOiBQcm9taXNlPFRleHRFZGl0b3I+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IHRoaXMudmlldy5lbGVtLiQodGhpcy5sb2NhdG9ycy5tb2RpZmllZEVkaXRvcilcbiAgICAgICAgcmV0dXJuIG5ldyBUZXh0RWRpdG9yKFxuICAgICAgICAgICAgdGhpcy5sb2NhdG9yTWFwLFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIG5ldyBFZGl0b3JWaWV3KHRoaXMubG9jYXRvck1hcClcbiAgICAgICAgKS53YWl0KClcbiAgICB9XG59XG4iXX0=