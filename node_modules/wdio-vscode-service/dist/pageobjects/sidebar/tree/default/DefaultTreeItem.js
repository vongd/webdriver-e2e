var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var DefaultTreeItem_1;
import { TreeItem } from '../../ViewItem.js';
import { PageDecorator } from '../../../utils.js';
import { TreeItem as TreeItemLocators, DefaultTreeItem as DefaultTreeItemLocators } from '../../../../locators/1.73.0.js';
/**
 * Default tree item base on the items in explorer view
 *
 * @category Sidebar
 */
let DefaultTreeItem = DefaultTreeItem_1 = class DefaultTreeItem extends TreeItem {
    constructor(locators, element, viewPart) {
        super(locators, element, viewPart.elem);
        this.viewPart = viewPart;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'DefaultTreeItem'];
    }
    getDescription() {
        return Promise.resolve(undefined);
    }
    async getLabel() {
        return this.elem.getAttribute(this.locatorMap.DefaultTreeSection.itemLabel);
    }
    async getTooltip() {
        return this.tooltip$.getAttribute('title');
    }
    async isExpanded() {
        const twistieClass = await this.twistie$.getAttribute('class');
        return twistieClass.indexOf('collapsed') < 0;
    }
    async getChildren() {
        const rows = await this.getChildItems(this.locatorMap.DefaultTreeSection.itemRow);
        const items = await Promise.all(rows.map(async (row) => (new DefaultTreeItem_1(this.locatorMap, 
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        row, this.viewPart).wait())));
        return items;
    }
    async isExpandable() {
        const twistieClass = await this.twistie$.getAttribute('class');
        return twistieClass.indexOf('collapsible') > -1;
    }
};
DefaultTreeItem = DefaultTreeItem_1 = __decorate([
    PageDecorator({ ...TreeItemLocators, ...DefaultTreeItemLocators })
], DefaultTreeItem);
export { DefaultTreeItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVmYXVsdFRyZWVJdGVtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3NpZGViYXIvdHJlZS9kZWZhdWx0L0RlZmF1bHRUcmVlSXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsT0FBTyxFQUFFLFFBQVEsRUFBb0IsTUFBTSxtQkFBbUIsQ0FBQTtBQUU5RCxPQUFPLEVBQUUsYUFBYSxFQUFvQyxNQUFNLG1CQUFtQixDQUFBO0FBQ25GLE9BQU8sRUFDSCxRQUFRLElBQUksZ0JBQWdCLEVBQzVCLGVBQWUsSUFBSSx1QkFBdUIsRUFDN0MsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUd2Qzs7OztHQUlHO0FBRUksSUFBTSxlQUFlLHVCQUFyQixNQUFNLGVBQWdCLFNBQVEsUUFBUTtJQU16QyxZQUNJLFFBQTBCLEVBQzFCLE9BQXFELEVBQzlDLFFBQXFCO1FBRTVCLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUZoQyxhQUFRLEdBQVIsUUFBUSxDQUFhO1FBUmhDOztXQUVHO1FBQ0ksZUFBVSxHQUFHLENBQUMsVUFBbUIsRUFBRSxpQkFBMEIsQ0FBQyxDQUFBO0lBUXJFLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0lBQ3JDLENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNWLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFtQixDQUFDLENBQUE7SUFDekYsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBQ1osT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUM5QyxDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFDWixNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlELE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUE7SUFDaEQsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXO1FBQ2IsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsT0FBaUIsQ0FBQyxDQUFBO1FBQzNGLE1BQU0sS0FBSyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUNwQixJQUFJLGlCQUFlLENBQ2YsSUFBSSxDQUFDLFVBQVU7UUFDZixpRUFBaUU7UUFDakUsR0FBVSxFQUNWLElBQUksQ0FBQyxRQUFRLENBQ2hCLENBQUMsSUFBSSxFQUFFLENBQ1gsQ0FBQyxDQUNMLENBQUE7UUFDRCxPQUFPLEtBQUssQ0FBQTtJQUNoQixDQUFDO0lBRUQsS0FBSyxDQUFDLFlBQVk7UUFDZCxNQUFNLFlBQVksR0FBRyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzlELE9BQU8sWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUNuRCxDQUFDO0NBQ0osQ0FBQTtBQWxEWSxlQUFlO0lBRDNCLGFBQWEsQ0FBQyxFQUFFLEdBQUcsZ0JBQWdCLEVBQUUsR0FBRyx1QkFBdUIsRUFBRSxDQUFDO0dBQ3RELGVBQWUsQ0FrRDNCO1NBbERZLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFpbmFibGVQcm9taXNlRWxlbWVudCB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuXG5pbXBvcnQgeyBUcmVlSXRlbSwgVmlld0l0ZW1Mb2NhdG9ycyB9IGZyb20gJy4uLy4uL1ZpZXdJdGVtLmpzJ1xuaW1wb3J0IHsgVHJlZVNlY3Rpb24gfSBmcm9tICcuLi9UcmVlU2VjdGlvbi5qcydcbmltcG9ydCB7IFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yLCBWU0NvZGVMb2NhdG9yTWFwIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMuanMnXG5pbXBvcnQge1xuICAgIFRyZWVJdGVtIGFzIFRyZWVJdGVtTG9jYXRvcnMsXG4gICAgRGVmYXVsdFRyZWVJdGVtIGFzIERlZmF1bHRUcmVlSXRlbUxvY2F0b3JzXG59IGZyb20gJy4uLy4uLy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuZXhwb3J0IGludGVyZmFjZSBEZWZhdWx0VHJlZUl0ZW0gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjxWaWV3SXRlbUxvY2F0b3JzPiB7IH1cbi8qKlxuICogRGVmYXVsdCB0cmVlIGl0ZW0gYmFzZSBvbiB0aGUgaXRlbXMgaW4gZXhwbG9yZXIgdmlld1xuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKHsgLi4uVHJlZUl0ZW1Mb2NhdG9ycywgLi4uRGVmYXVsdFRyZWVJdGVtTG9jYXRvcnMgfSlcbmV4cG9ydCBjbGFzcyBEZWZhdWx0VHJlZUl0ZW0gZXh0ZW5kcyBUcmVlSXRlbSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9IFsnVHJlZUl0ZW0nIGFzIGNvbnN0LCAnRGVmYXVsdFRyZWVJdGVtJyBhcyBjb25zdF1cblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIGVsZW1lbnQ6IENoYWluYWJsZVByb21pc2VFbGVtZW50PFdlYmRyaXZlcklPLkVsZW1lbnQ+LFxuICAgICAgICBwdWJsaWMgdmlld1BhcnQ6IFRyZWVTZWN0aW9uXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBlbGVtZW50LCB2aWV3UGFydC5lbGVtKVxuICAgIH1cblxuICAgIGdldERlc2NyaXB0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TGFiZWwgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW0uZ2V0QXR0cmlidXRlKHRoaXMubG9jYXRvck1hcC5EZWZhdWx0VHJlZVNlY3Rpb24uaXRlbUxhYmVsIGFzIHN0cmluZylcbiAgICB9XG5cbiAgICBhc3luYyBnZXRUb29sdGlwICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy50b29sdGlwJC5nZXRBdHRyaWJ1dGUoJ3RpdGxlJylcbiAgICB9XG5cbiAgICBhc3luYyBpc0V4cGFuZGVkICgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgdHdpc3RpZUNsYXNzID0gYXdhaXQgdGhpcy50d2lzdGllJC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJylcbiAgICAgICAgcmV0dXJuIHR3aXN0aWVDbGFzcy5pbmRleE9mKCdjb2xsYXBzZWQnKSA8IDBcbiAgICB9XG5cbiAgICBhc3luYyBnZXRDaGlsZHJlbiAoKTogUHJvbWlzZTxUcmVlSXRlbVtdPiB7XG4gICAgICAgIGNvbnN0IHJvd3MgPSBhd2FpdCB0aGlzLmdldENoaWxkSXRlbXModGhpcy5sb2NhdG9yTWFwLkRlZmF1bHRUcmVlU2VjdGlvbi5pdGVtUm93IGFzIHN0cmluZylcbiAgICAgICAgY29uc3QgaXRlbXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIHJvd3MubWFwKGFzeW5jIChyb3cpID0+IChcbiAgICAgICAgICAgICAgICBuZXcgRGVmYXVsdFRyZWVJdGVtKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2F0b3JNYXAsXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgIHJvdyBhcyBhbnksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld1BhcnRcbiAgICAgICAgICAgICAgICApLndhaXQoKVxuICAgICAgICAgICAgKSlcbiAgICAgICAgKVxuICAgICAgICByZXR1cm4gaXRlbXNcbiAgICB9XG5cbiAgICBhc3luYyBpc0V4cGFuZGFibGUgKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICAgICAgICBjb25zdCB0d2lzdGllQ2xhc3MgPSBhd2FpdCB0aGlzLnR3aXN0aWUkLmdldEF0dHJpYnV0ZSgnY2xhc3MnKVxuICAgICAgICByZXR1cm4gdHdpc3RpZUNsYXNzLmluZGV4T2YoJ2NvbGxhcHNpYmxlJykgPiAtMVxuICAgIH1cbn1cbiJdfQ==