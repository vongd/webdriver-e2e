var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Key } from 'webdriverio';
import { Editor, InputBox } from '../index.js';
import { PageDecorator } from '../utils.js';
import { Editor as EditorLocators } from '../../locators/1.73.0.js';
import { CMD_KEY } from '../../constants.js';
/**
 * Page object for custom editors
 *
 * @category Editor
 */
let CustomEditor = class CustomEditor extends Editor {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'Editor';
    }
    /**
     * Check if the editor has unsaved changes
     * @returns Promise resolving to true if there are unsaved changes, false otherwise
     */
    async isDirty() {
        const tab = await this.getTab();
        const klass = await tab.elem.getAttribute('class');
        return klass.includes('dirty');
    }
    /**
     * Save the editor
     */
    async save() {
        await browser.action('key')
            .down(CMD_KEY).down('s')
            .up(CMD_KEY).up('s')
            .perform();
    }
    /**
     * Open the Save as prompt
     *
     * @returns InputBox serving as a simple file dialog
     */
    async saveAs() {
        await browser.action('key')
            .down(CMD_KEY).down(Key.Shift).down('s')
            .up(CMD_KEY).down(Key.Shift).up('s')
            .perform();
        const inputBox = browser.$(this.locatorMap.InputBox.elem);
        await inputBox.waitForExist({ timeout: 5000 });
        return new InputBox(this.locatorMap);
    }
};
CustomEditor = __decorate([
    PageDecorator(EditorLocators)
], CustomEditor);
export { CustomEditor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tRWRpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL2VkaXRvci9DdXN0b21FZGl0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUVqQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUM5QyxPQUFPLEVBQUUsYUFBYSxFQUFrQixNQUFNLGFBQWEsQ0FBQTtBQUMzRCxPQUFPLEVBQUUsTUFBTSxJQUFJLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBQ25FLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUc1Qzs7OztHQUlHO0FBRUksSUFBTSxZQUFZLEdBQWxCLE1BQU0sWUFBYSxTQUFRLE1BQTZCO0lBQXhEOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLFFBQWlCLENBQUE7SUFxQ3pDLENBQUM7SUFuQ0c7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLE9BQU87UUFDVCxNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQTtRQUMvQixNQUFNLEtBQUssR0FBRyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2xELE9BQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLLENBQUMsSUFBSTtRQUNOLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7YUFDdkIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7YUFDbkIsT0FBTyxFQUFFLENBQUE7SUFDbEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsTUFBTTtRQUNSLE1BQU0sT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7YUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzthQUN2QyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ25DLE9BQU8sRUFBRSxDQUFBO1FBRWQsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFjLENBQUMsQ0FBQTtRQUNuRSxNQUFNLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUM5QyxPQUFPLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUN4QyxDQUFDO0NBQ0osQ0FBQTtBQXpDWSxZQUFZO0lBRHhCLGFBQWEsQ0FBQyxjQUFjLENBQUM7R0FDakIsWUFBWSxDQXlDeEI7U0F6Q1ksWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtleSB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuXG5pbXBvcnQgeyBFZGl0b3IsIElucHV0Qm94IH0gZnJvbSAnLi4vaW5kZXguanMnXG5pbXBvcnQgeyBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciB9IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgRWRpdG9yIGFzIEVkaXRvckxvY2F0b3JzIH0gZnJvbSAnLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuaW1wb3J0IHsgQ01EX0tFWSB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcydcblxuZXhwb3J0IGludGVyZmFjZSBDdXN0b21FZGl0b3IgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgRWRpdG9yTG9jYXRvcnM+IHt9XG4vKipcbiAqIFBhZ2Ugb2JqZWN0IGZvciBjdXN0b20gZWRpdG9yc1xuICpcbiAqIEBjYXRlZ29yeSBFZGl0b3JcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoRWRpdG9yTG9jYXRvcnMpXG5leHBvcnQgY2xhc3MgQ3VzdG9tRWRpdG9yIGV4dGVuZHMgRWRpdG9yPHR5cGVvZiBFZGl0b3JMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnRWRpdG9yJyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGVkaXRvciBoYXMgdW5zYXZlZCBjaGFuZ2VzXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgdG8gdHJ1ZSBpZiB0aGVyZSBhcmUgdW5zYXZlZCBjaGFuZ2VzLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBhc3luYyBpc0RpcnR5ICgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgdGFiID0gYXdhaXQgdGhpcy5nZXRUYWIoKVxuICAgICAgICBjb25zdCBrbGFzcyA9IGF3YWl0IHRhYi5lbGVtLmdldEF0dHJpYnV0ZSgnY2xhc3MnKVxuICAgICAgICByZXR1cm4ga2xhc3MuaW5jbHVkZXMoJ2RpcnR5JylcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTYXZlIHRoZSBlZGl0b3JcbiAgICAgKi9cbiAgICBhc3luYyBzYXZlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5hY3Rpb24oJ2tleScpXG4gICAgICAgICAgICAuZG93bihDTURfS0VZKS5kb3duKCdzJylcbiAgICAgICAgICAgIC51cChDTURfS0VZKS51cCgncycpXG4gICAgICAgICAgICAucGVyZm9ybSgpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT3BlbiB0aGUgU2F2ZSBhcyBwcm9tcHRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIElucHV0Qm94IHNlcnZpbmcgYXMgYSBzaW1wbGUgZmlsZSBkaWFsb2dcbiAgICAgKi9cbiAgICBhc3luYyBzYXZlQXMgKCk6IFByb21pc2U8SW5wdXRCb3g+IHtcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5hY3Rpb24oJ2tleScpXG4gICAgICAgICAgICAuZG93bihDTURfS0VZKS5kb3duKEtleS5TaGlmdCkuZG93bigncycpXG4gICAgICAgICAgICAudXAoQ01EX0tFWSkuZG93bihLZXkuU2hpZnQpLnVwKCdzJylcbiAgICAgICAgICAgIC5wZXJmb3JtKClcblxuICAgICAgICBjb25zdCBpbnB1dEJveCA9IGJyb3dzZXIuJCh0aGlzLmxvY2F0b3JNYXAuSW5wdXRCb3guZWxlbSBhcyBzdHJpbmcpXG4gICAgICAgIGF3YWl0IGlucHV0Qm94LndhaXRGb3JFeGlzdCh7IHRpbWVvdXQ6IDUwMDAgfSlcbiAgICAgICAgcmV0dXJuIG5ldyBJbnB1dEJveCh0aGlzLmxvY2F0b3JNYXApXG4gICAgfVxufVxuIl19