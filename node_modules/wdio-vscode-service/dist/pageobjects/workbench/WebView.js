var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var WebView_1;
import { BasePage, PageDecorator } from '../utils.js';
import { WebView as WebViewLocators } from '../../locators/1.73.0.js';
// @ts-expect-error `PageDecorator` doesn't allow static methods
let WebView = WebView_1 = class WebView extends BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private locator key to identify locator map (see locators.ts)
         */
        this.locatorKey = 'WebView';
    }
    get activeFrame() {
        return $(this._locators.WebView.activeFrame);
    }
    /**
     * Switch WebDriver context to given webview so subsequent element
     * calls are targeting elements within the webview.
     *
     * __Note:__ ensure to call `webview.close()` to leave the webview
     * context before using other page objects.
     */
    async open() {
        await browser.switchToFrame(this.elem);
        await (await this.activeFrame).waitForExist();
        await browser.switchToFrame(await this.activeFrame);
    }
    /**
     * Switch from the webview context back to the VSCode context.
     */
    async close() {
        await browser.switchToFrame(null);
        await browser.switchToFrame(null);
    }
    /**
     * Get all available WebViews (including the once in the sidebar or from the editor)
     * @param locators locator map
     * @returns a list of webview objects
     */
    static async getAllWebViews(locators) {
        try {
            /**
             * webviews might not be immediatelly available when VS Code boots up
             */
            await browser.$(locators.WebView.outerFrame).waitForExist({
                timeout: 5000,
                timeoutMsg: 'no webviews found'
            });
        }
        catch (err) {
            return [];
        }
        const frames = await browser.$$(locators.WebView.outerFrame);
        return frames.map((f) => (new WebView_1(locators, f)));
    }
};
WebView = WebView_1 = __decorate([
    PageDecorator(WebViewLocators)
], WebView);
export { WebView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViVmlldy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy93b3JrYmVuY2gvV2ViVmlldy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQWtCLE1BQU0sYUFBYSxDQUFBO0FBQ3JFLE9BQU8sRUFBRSxPQUFPLElBQUksZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFJckUsZ0VBQWdFO0FBRXpELElBQU0sT0FBTyxlQUFiLE1BQU0sT0FBUSxTQUFRLFFBQWdDO0lBQXREOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLFNBQWtCLENBQUE7SUFrRDFDLENBQUM7SUFoREcsSUFBSSxXQUFXO1FBQ1gsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsV0FBcUIsQ0FBQyxDQUFBO0lBQzFELENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSSxLQUFLLENBQUMsSUFBSTtRQUNiLE1BQU0sT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7UUFDdEMsTUFBTSxDQUFDLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQzdDLE1BQU0sT0FBTyxDQUFDLGFBQWEsQ0FBQyxNQUFNLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUN2RCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLLENBQUMsS0FBSztRQUNkLE1BQU0sT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUNqQyxNQUFNLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDckMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBRSxRQUEwQjtRQUNuRCxJQUFJO1lBQ0E7O2VBRUc7WUFDSCxNQUFNLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFvQixDQUFDLENBQUMsWUFBWSxDQUFDO2dCQUNoRSxPQUFPLEVBQUUsSUFBSTtnQkFDYixVQUFVLEVBQUUsbUJBQW1CO2FBQ2xDLENBQUMsQ0FBQTtTQUNMO1FBQUMsT0FBTyxHQUFRLEVBQUU7WUFDZixPQUFPLEVBQUUsQ0FBQTtTQUNaO1FBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsVUFBb0IsQ0FBQyxDQUFBO1FBQ3RFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FDckIsSUFBSSxTQUFPLENBQUMsUUFBUSxFQUFFLENBQXdELENBQUMsQ0FDbEYsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKLENBQUE7QUF0RFksT0FBTztJQURuQixhQUFhLENBQUMsZUFBZSxDQUFDO0dBQ2xCLE9BQU8sQ0FzRG5CO1NBdERZLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFpbmFibGVQcm9taXNlRWxlbWVudCB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuaW1wb3J0IHsgQmFzZVBhZ2UsIFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yIH0gZnJvbSAnLi4vdXRpbHMuanMnXG5pbXBvcnQgeyBXZWJWaWV3IGFzIFdlYlZpZXdMb2NhdG9ycyB9IGZyb20gJy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcbmltcG9ydCB0eXBlIHsgVlNDb2RlTG9jYXRvck1hcCB9IGZyb20gJy4uL3V0aWxzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFdlYlZpZXcgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgV2ViVmlld0xvY2F0b3JzPiB7IH1cbi8vIEB0cy1leHBlY3QtZXJyb3IgYFBhZ2VEZWNvcmF0b3JgIGRvZXNuJ3QgYWxsb3cgc3RhdGljIG1ldGhvZHNcbkBQYWdlRGVjb3JhdG9yKFdlYlZpZXdMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBXZWJWaWV3IGV4dGVuZHMgQmFzZVBhZ2U8dHlwZW9mIFdlYlZpZXdMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlIGxvY2F0b3Iga2V5IHRvIGlkZW50aWZ5IGxvY2F0b3IgbWFwIChzZWUgbG9jYXRvcnMudHMpXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnV2ViVmlldycgYXMgY29uc3RcblxuICAgIGdldCBhY3RpdmVGcmFtZSAoKSB7XG4gICAgICAgIHJldHVybiAkKHRoaXMuX2xvY2F0b3JzLldlYlZpZXcuYWN0aXZlRnJhbWUgYXMgc3RyaW5nKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN3aXRjaCBXZWJEcml2ZXIgY29udGV4dCB0byBnaXZlbiB3ZWJ2aWV3IHNvIHN1YnNlcXVlbnQgZWxlbWVudFxuICAgICAqIGNhbGxzIGFyZSB0YXJnZXRpbmcgZWxlbWVudHMgd2l0aGluIHRoZSB3ZWJ2aWV3LlxuICAgICAqXG4gICAgICogX19Ob3RlOl9fIGVuc3VyZSB0byBjYWxsIGB3ZWJ2aWV3LmNsb3NlKClgIHRvIGxlYXZlIHRoZSB3ZWJ2aWV3XG4gICAgICogY29udGV4dCBiZWZvcmUgdXNpbmcgb3RoZXIgcGFnZSBvYmplY3RzLlxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBvcGVuICgpIHtcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5zd2l0Y2hUb0ZyYW1lKHRoaXMuZWxlbSlcbiAgICAgICAgYXdhaXQgKGF3YWl0IHRoaXMuYWN0aXZlRnJhbWUpLndhaXRGb3JFeGlzdCgpXG4gICAgICAgIGF3YWl0IGJyb3dzZXIuc3dpdGNoVG9GcmFtZShhd2FpdCB0aGlzLmFjdGl2ZUZyYW1lKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN3aXRjaCBmcm9tIHRoZSB3ZWJ2aWV3IGNvbnRleHQgYmFjayB0byB0aGUgVlNDb2RlIGNvbnRleHQuXG4gICAgICovXG4gICAgcHVibGljIGFzeW5jIGNsb3NlICgpIHtcbiAgICAgICAgYXdhaXQgYnJvd3Nlci5zd2l0Y2hUb0ZyYW1lKG51bGwpXG4gICAgICAgIGF3YWl0IGJyb3dzZXIuc3dpdGNoVG9GcmFtZShudWxsKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBhbGwgYXZhaWxhYmxlIFdlYlZpZXdzIChpbmNsdWRpbmcgdGhlIG9uY2UgaW4gdGhlIHNpZGViYXIgb3IgZnJvbSB0aGUgZWRpdG9yKVxuICAgICAqIEBwYXJhbSBsb2NhdG9ycyBsb2NhdG9yIG1hcFxuICAgICAqIEByZXR1cm5zIGEgbGlzdCBvZiB3ZWJ2aWV3IG9iamVjdHNcbiAgICAgKi9cbiAgICBzdGF0aWMgYXN5bmMgZ2V0QWxsV2ViVmlld3MgKGxvY2F0b3JzOiBWU0NvZGVMb2NhdG9yTWFwKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIHdlYnZpZXdzIG1pZ2h0IG5vdCBiZSBpbW1lZGlhdGVsbHkgYXZhaWxhYmxlIHdoZW4gVlMgQ29kZSBib290cyB1cFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBhd2FpdCBicm93c2VyLiQobG9jYXRvcnMuV2ViVmlldy5vdXRlckZyYW1lIGFzIHN0cmluZykud2FpdEZvckV4aXN0KHtcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiA1MDAwLFxuICAgICAgICAgICAgICAgIHRpbWVvdXRNc2c6ICdubyB3ZWJ2aWV3cyBmb3VuZCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZyYW1lcyA9IGF3YWl0IGJyb3dzZXIuJCQobG9jYXRvcnMuV2ViVmlldy5vdXRlckZyYW1lIGFzIHN0cmluZylcbiAgICAgICAgcmV0dXJuIGZyYW1lcy5tYXAoKGYpID0+IChcbiAgICAgICAgICAgIG5ldyBXZWJWaWV3KGxvY2F0b3JzLCBmIGFzIGFueSBhcyBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PilcbiAgICAgICAgKSlcbiAgICB9XG59XG4iXX0=