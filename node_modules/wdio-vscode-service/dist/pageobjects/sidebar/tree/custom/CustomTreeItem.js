var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var CustomTreeItem_1;
import { TreeItem } from '../../ViewItem.js';
import { PageDecorator } from '../../../utils.js';
import { TreeItem as TreeItemLocators, CustomTreeItem as CustomTreeItemLocators } from '../../../../locators/1.73.0.js';
/**
 * View item in a custom-made content section (e.g. an extension tree view)
 *
 * @category Sidebar
 */
let CustomTreeItem = CustomTreeItem_1 = class CustomTreeItem extends TreeItem {
    constructor(locators, element, viewPart) {
        super(locators, element, viewPart.elem);
        this.viewPart = viewPart;
        /**
         * @private
         */
        this.locatorKey = ['TreeItem', 'CustomTreeItem'];
    }
    async getLabel() {
        return this.elem.$(this.locatorMap.CustomTreeSection.itemLabel).getText();
    }
    async getTooltip() {
        return this.elem.getAttribute(this.locators.tooltipAttribute);
    }
    async getDescription() {
        return this.description$.getText();
    }
    async isExpanded() {
        const attr = await this.elem.getAttribute(this.locators.expandedAttr);
        return attr === this.locators.expandedValue;
    }
    async getChildren() {
        const rows = await this.getChildItems(this.locatorMap.DefaultTreeSection.itemRow);
        const items = await Promise.all(rows.map(async (row) => (
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        new CustomTreeItem_1(this.locatorMap, row, this.viewPart).wait())));
        return items;
    }
    async isExpandable() {
        const attr = await this.elem.getAttribute(this.locators.expandedAttr);
        return attr !== null;
    }
};
CustomTreeItem = CustomTreeItem_1 = __decorate([
    PageDecorator({ ...TreeItemLocators, ...CustomTreeItemLocators })
], CustomTreeItem);
export { CustomTreeItem };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tVHJlZUl0ZW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvc2lkZWJhci90cmVlL2N1c3RvbS9DdXN0b21UcmVlSXRlbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBR0EsT0FBTyxFQUFFLFFBQVEsRUFBb0IsTUFBTSxtQkFBbUIsQ0FBQTtBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFvQyxNQUFNLG1CQUFtQixDQUFBO0FBQ25GLE9BQU8sRUFDSCxRQUFRLElBQUksZ0JBQWdCLEVBQzVCLGNBQWMsSUFBSSxzQkFBc0IsRUFDM0MsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUd2Qzs7OztHQUlHO0FBRUksSUFBTSxjQUFjLHNCQUFwQixNQUFNLGNBQWUsU0FBUSxRQUFRO0lBTXhDLFlBQ0ksUUFBMEIsRUFDMUIsT0FBcUQsRUFDOUMsUUFBcUI7UUFFNUIsS0FBSyxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRmhDLGFBQVEsR0FBUixRQUFRLENBQWE7UUFSaEM7O1dBRUc7UUFDSSxlQUFVLEdBQUcsQ0FBQyxVQUFtQixFQUFFLGdCQUF5QixDQUFDLENBQUE7SUFRcEUsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRO1FBQ1YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLFNBQW1CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUN2RixDQUFDO0lBRUQsS0FBSyxDQUFDLFVBQVU7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUNqRSxDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWM7UUFDaEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3RDLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBVTtRQUNaLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNyRSxPQUFPLElBQUksS0FBSyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQTtJQUMvQyxDQUFDO0lBRUQsS0FBSyxDQUFDLFdBQVc7UUFDYixNQUFNLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFpQixDQUFDLENBQUE7UUFDM0YsTUFBTSxLQUFLLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDO1FBQ3BCLGlFQUFpRTtRQUNqRSxJQUFJLGdCQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUN4RSxDQUFDLENBQ0wsQ0FBQTtRQUNELE9BQU8sS0FBSyxDQUFBO0lBQ2hCLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWTtRQUNkLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUNyRSxPQUFPLElBQUksS0FBSyxJQUFJLENBQUE7SUFDeEIsQ0FBQztDQUNKLENBQUE7QUE5Q1ksY0FBYztJQUQxQixhQUFhLENBQUMsRUFBRSxHQUFHLGdCQUFnQixFQUFFLEdBQUcsc0JBQXNCLEVBQUUsQ0FBQztHQUNyRCxjQUFjLENBOEMxQjtTQTlDWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBDaGFpbmFibGVQcm9taXNlRWxlbWVudCB9IGZyb20gJ3dlYmRyaXZlcmlvJ1xuXG5pbXBvcnQgeyBUcmVlU2VjdGlvbiB9IGZyb20gJy4uL1RyZWVTZWN0aW9uLmpzJ1xuaW1wb3J0IHsgVHJlZUl0ZW0sIFZpZXdJdGVtTG9jYXRvcnMgfSBmcm9tICcuLi8uLi9WaWV3SXRlbS5qcydcbmltcG9ydCB7IFBhZ2VEZWNvcmF0b3IsIElQYWdlRGVjb3JhdG9yLCBWU0NvZGVMb2NhdG9yTWFwIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMuanMnXG5pbXBvcnQge1xuICAgIFRyZWVJdGVtIGFzIFRyZWVJdGVtTG9jYXRvcnMsXG4gICAgQ3VzdG9tVHJlZUl0ZW0gYXMgQ3VzdG9tVHJlZUl0ZW1Mb2NhdG9yc1xufSBmcm9tICcuLi8uLi8uLi8uLi9sb2NhdG9ycy8xLjczLjAuanMnXG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tVHJlZUl0ZW0gZXh0ZW5kcyBJUGFnZURlY29yYXRvcjxWaWV3SXRlbUxvY2F0b3JzPiB7IH1cbi8qKlxuICogVmlldyBpdGVtIGluIGEgY3VzdG9tLW1hZGUgY29udGVudCBzZWN0aW9uIChlLmcuIGFuIGV4dGVuc2lvbiB0cmVlIHZpZXcpXG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoeyAuLi5UcmVlSXRlbUxvY2F0b3JzLCAuLi5DdXN0b21UcmVlSXRlbUxvY2F0b3JzIH0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tVHJlZUl0ZW0gZXh0ZW5kcyBUcmVlSXRlbSB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9IFsnVHJlZUl0ZW0nIGFzIGNvbnN0LCAnQ3VzdG9tVHJlZUl0ZW0nIGFzIGNvbnN0XVxuXG4gICAgY29uc3RydWN0b3IgKFxuICAgICAgICBsb2NhdG9yczogVlNDb2RlTG9jYXRvck1hcCxcbiAgICAgICAgZWxlbWVudDogQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQ8V2ViZHJpdmVySU8uRWxlbWVudD4sXG4gICAgICAgIHB1YmxpYyB2aWV3UGFydDogVHJlZVNlY3Rpb25cbiAgICApIHtcbiAgICAgICAgc3VwZXIobG9jYXRvcnMsIGVsZW1lbnQsIHZpZXdQYXJ0LmVsZW0pXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0TGFiZWwgKCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW0uJCh0aGlzLmxvY2F0b3JNYXAuQ3VzdG9tVHJlZVNlY3Rpb24uaXRlbUxhYmVsIGFzIHN0cmluZykuZ2V0VGV4dCgpXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0VG9vbHRpcCAoKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbS5nZXRBdHRyaWJ1dGUodGhpcy5sb2NhdG9ycy50b29sdGlwQXR0cmlidXRlKVxuICAgIH1cblxuICAgIGFzeW5jIGdldERlc2NyaXB0aW9uICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kZXNjcmlwdGlvbiQuZ2V0VGV4dCgpXG4gICAgfVxuXG4gICAgYXN5bmMgaXNFeHBhbmRlZCAoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgICAgIGNvbnN0IGF0dHIgPSBhd2FpdCB0aGlzLmVsZW0uZ2V0QXR0cmlidXRlKHRoaXMubG9jYXRvcnMuZXhwYW5kZWRBdHRyKVxuICAgICAgICByZXR1cm4gYXR0ciA9PT0gdGhpcy5sb2NhdG9ycy5leHBhbmRlZFZhbHVlXG4gICAgfVxuXG4gICAgYXN5bmMgZ2V0Q2hpbGRyZW4gKCk6IFByb21pc2U8VHJlZUl0ZW1bXT4ge1xuICAgICAgICBjb25zdCByb3dzID0gYXdhaXQgdGhpcy5nZXRDaGlsZEl0ZW1zKHRoaXMubG9jYXRvck1hcC5EZWZhdWx0VHJlZVNlY3Rpb24uaXRlbVJvdyBhcyBzdHJpbmcpXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICByb3dzLm1hcChhc3luYyAocm93KSA9PiAoXG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgICAgICAgICBuZXcgQ3VzdG9tVHJlZUl0ZW0odGhpcy5sb2NhdG9yTWFwLCByb3cgYXMgYW55LCB0aGlzLnZpZXdQYXJ0KS53YWl0KClcbiAgICAgICAgICAgICkpXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGl0ZW1zXG4gICAgfVxuXG4gICAgYXN5bmMgaXNFeHBhbmRhYmxlICgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICAgICAgY29uc3QgYXR0ciA9IGF3YWl0IHRoaXMuZWxlbS5nZXRBdHRyaWJ1dGUodGhpcy5sb2NhdG9ycy5leHBhbmRlZEF0dHIpXG4gICAgICAgIHJldHVybiBhdHRyICE9PSBudWxsXG4gICAgfVxufVxuIl19