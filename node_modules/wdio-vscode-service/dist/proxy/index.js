import WebSocket from 'ws';
import { SETTINGS_KEY } from '../constants.js';
export async function run(vscode) {
    const config = vscode.workspace.getConfiguration(SETTINGS_KEY);
    console.log(`Connect to service proxy on port ${config.port}`);
    const ws = new WebSocket(`ws://localhost:${config.port}`);
    ws.on('open', () => console.log('WebSocket proxy connected'));
    ws.on('message', async (data) => {
        try {
            const message = data.toString();
            console.log(`Received remote command: ${message}`);
            const { id, fn, params } = JSON.parse(data.toString());
            try {
                // eslint-disable-next-line no-eval, @typescript-eslint/no-unsafe-call
                let result = eval(fn).call(globalThis, vscode, ...params);
                if (typeof result === 'object' && typeof result.then === 'function') {
                    result = await result;
                }
                const response = JSON.stringify({ id, result });
                console.log(`Return remote response: ${response}`);
                return ws.send(response);
            }
            catch (err) {
                return ws.send(JSON.stringify({ id, error: err.message }));
            }
        }
        catch (err) {
            console.error(`Failed run remote command: ${err.message}`);
        }
        return null;
    });
    return new Promise(() => { });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJveHkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxTQUFTLE1BQU0sSUFBSSxDQUFBO0FBRTFCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUc5QyxNQUFNLENBQUMsS0FBSyxVQUFVLEdBQUcsQ0FBRSxNQUEyQjtJQUNsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQzlELE9BQU8sQ0FBQyxHQUFHLENBQUMsb0NBQW9DLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO0lBRTlELE1BQU0sRUFBRSxHQUFHLElBQUksU0FBUyxDQUFDLGtCQUFrQixNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQTtJQUN6RCxFQUFFLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUMsQ0FBQTtJQUM3RCxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDNUIsSUFBSTtZQUNBLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtZQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixPQUFPLEVBQUUsQ0FBQyxDQUFBO1lBRWxELE1BQU0sRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFrQixDQUFBO1lBRXZFLElBQUk7Z0JBQ0Esc0VBQXNFO2dCQUN0RSxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQTtnQkFDekQsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLElBQUksT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtvQkFDakUsTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFBO2lCQUN4QjtnQkFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFpQixFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO2dCQUMvRCxPQUFPLENBQUMsR0FBRyxDQUFDLDJCQUEyQixRQUFRLEVBQUUsQ0FBQyxDQUFBO2dCQUVsRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7YUFDM0I7WUFBQyxPQUFPLEdBQVEsRUFBRTtnQkFDZixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBaUIsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDN0U7U0FDSjtRQUFDLE9BQU8sR0FBUSxFQUFFO1lBQ2YsT0FBTyxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDN0Q7UUFDRCxPQUFPLElBQUksQ0FBQTtJQUNmLENBQUMsQ0FBQyxDQUFBO0lBRUYsT0FBTyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUMsQ0FBQTtBQUNoQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW1pc3VzZWQtcHJvbWlzZXMgKi9cbmltcG9ydCB0eXBlIFZTQ29kZUltcG9ydCBmcm9tICd2c2NvZGUnXG5pbXBvcnQgV2ViU29ja2V0IGZyb20gJ3dzJ1xuXG5pbXBvcnQgeyBTRVRUSU5HU19LRVkgfSBmcm9tICcuLi9jb25zdGFudHMuanMnXG5pbXBvcnQgdHlwZSB7IFJlbW90ZUNvbW1hbmQsIFJlbW90ZVJlc3BvbnNlIH0gZnJvbSAnLi4vdHlwZXMnXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBydW4gKHZzY29kZTogdHlwZW9mIFZTQ29kZUltcG9ydCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IGNvbmZpZyA9IHZzY29kZS53b3Jrc3BhY2UuZ2V0Q29uZmlndXJhdGlvbihTRVRUSU5HU19LRVkpXG4gICAgY29uc29sZS5sb2coYENvbm5lY3QgdG8gc2VydmljZSBwcm94eSBvbiBwb3J0ICR7Y29uZmlnLnBvcnR9YClcblxuICAgIGNvbnN0IHdzID0gbmV3IFdlYlNvY2tldChgd3M6Ly9sb2NhbGhvc3Q6JHtjb25maWcucG9ydH1gKVxuICAgIHdzLm9uKCdvcGVuJywgKCkgPT4gY29uc29sZS5sb2coJ1dlYlNvY2tldCBwcm94eSBjb25uZWN0ZWQnKSlcbiAgICB3cy5vbignbWVzc2FnZScsIGFzeW5jIChkYXRhKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gZGF0YS50b1N0cmluZygpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgUmVjZWl2ZWQgcmVtb3RlIGNvbW1hbmQ6ICR7bWVzc2FnZX1gKVxuXG4gICAgICAgICAgICBjb25zdCB7IGlkLCBmbiwgcGFyYW1zIH0gPSBKU09OLnBhcnNlKGRhdGEudG9TdHJpbmcoKSkgYXMgUmVtb3RlQ29tbWFuZFxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1ldmFsLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGxcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZXZhbChmbikuY2FsbChnbG9iYWxUaGlzLCB2c2NvZGUsIC4uLnBhcmFtcylcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHJlc3VsdC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHJlc3VsdFxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gSlNPTi5zdHJpbmdpZnkoPFJlbW90ZVJlc3BvbnNlPnsgaWQsIHJlc3VsdCB9KVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBSZXR1cm4gcmVtb3RlIHJlc3BvbnNlOiAke3Jlc3BvbnNlfWApXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gd3Muc2VuZChyZXNwb25zZSlcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycjogYW55KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdzLnNlbmQoSlNPTi5zdHJpbmdpZnkoPFJlbW90ZVJlc3BvbnNlPnsgaWQsIGVycm9yOiBlcnIubWVzc2FnZSB9KSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCBydW4gcmVtb3RlIGNvbW1hbmQ6ICR7ZXJyLm1lc3NhZ2V9YClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIH0pXG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKCkgPT4ge30pXG59XG4iXX0=