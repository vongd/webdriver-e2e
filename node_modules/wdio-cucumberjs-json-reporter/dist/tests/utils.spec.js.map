{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../lib/tests/utils.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { TEST_SCENARIO_STATS, TEST_SCENARIO_STATS_ERROR } from './__mocks__/mocks';\nimport Utils from '../utils';\n\ndescribe( 'utils', () => {\n    describe( 'getFailedMessage', () => {\n        it( 'should not return an error message if the status is \"passed\"', () => {\n            expect( new Utils().getFailedMessage( TEST_SCENARIO_STATS ) ).toEqual( {} );\n        } );\n\n        it( 'should return an error message if the status is \"failed\"', () => {\n            expect( new Utils().getFailedMessage( TEST_SCENARIO_STATS_ERROR ) ).toMatchSnapshot();\n        } );\n    } );\n\n    describe( 'containsSteps', () => {\n        it( 'should return false if none of the values is a step name', () => {\n            const steps = [\n                { keyword: 'foo' },\n                { keyword: 'bar' },\n                { keyword: 'foobar' },\n            ];\n            const language = 'en';\n            expect( new Utils().containsSteps( steps, language ) ).toEqual( false );\n        } );\n\n        it( 'should return true if step contains the word `Given`', () => {\n            const steps = [\n                { keyword: 'foo' },\n                { keyword: 'bar' },\n                { keyword: 'Given' },\n            ];\n            const language = 'en';\n            expect( new Utils().containsSteps( steps, language ) ).toEqual( true );\n        } );\n\n        it( 'should return true if step contains the word `When`', () => {\n            const steps = [\n                { keyword: 'When' },\n                { keyword: 'bar' },\n                { keyword: 'foo' },\n            ];\n            const language = 'en';\n            expect( new Utils().containsSteps( steps, language ) ).toEqual( true );\n        } );\n\n        it( 'should return true if step contains the word `Then`', () => {\n            const steps = [\n                { keyword: 'bar' },\n                { keyword: 'Then' },\n                { keyword: 'foo' },\n            ];\n            const language = 'en';\n            expect( new Utils().containsSteps( steps, language ) ).toEqual( true );\n        } );\n\n        it( 'should return true if step contains the word `And`', () => {\n            const steps = [\n                { keyword: 'bar' },\n                { keyword: 'And' },\n            ];\n            const language = 'en';\n            expect( new Utils().containsSteps( steps, language ) ).toEqual( true );\n        } );\n    } );\n\n    describe( 'keywordStartsWith', () => {\n        it( 'should return undefined if the first word is not a keyword', () => {\n            const language = 'en';\n\n            expect( new Utils().keywordStartsWith( 'Milk is not a reserved keyword', language ) ).toBeUndefined();\n        } );\n\n        it( 'should return the first word if it is a keyword', () => {\n            const language = 'en';\n\n            // * is a valid keyword in Gherkin\n            expect( new Utils().keywordStartsWith( '* I have milk', language ) ).toEqual( '*' );\n        } );\n    } );\n} );\n"]}