import fs from 'node:fs/promises';
import path from 'node:path';
import { fsProviderExtensionPrefix, fsProviderFolderUri } from './constants.js';
const { URI } = (await import('vscode-uri')).default;
export async function getWorkbenchOptions(ctx, config) {
    const options = {};
    if (config.extensionPaths) {
        const extensionPromises = config.extensionPaths.map((extensionPath, index) => scanForExtensions(extensionPath, {
            scheme: ctx.protocol,
            authority: ctx.host,
            path: `/static/extensions/${index}`
        }));
        options.additionalBuiltinExtensions = (await Promise.all(extensionPromises)).flat();
    }
    if (config.extensionIds) {
        if (!options.additionalBuiltinExtensions) {
            options.additionalBuiltinExtensions = [];
        }
        options.additionalBuiltinExtensions.push(...config.extensionIds);
    }
    if (config.extensionDevelopmentPath) {
        const developmentOptions = options.developmentOptions = {};
        developmentOptions.extensions = await scanForExtensions(config.extensionDevelopmentPath, { scheme: ctx.protocol, authority: ctx.host, path: '/static/devextensions' });
        if (config.extensionTestsPath) {
            let relativePath = path.relative(config.extensionDevelopmentPath, config.extensionTestsPath);
            if (process.platform === 'win32') {
                relativePath = relativePath.replace(/\\/g, '/');
            }
            developmentOptions.extensionTestsPath = {
                scheme: ctx.protocol,
                authority: ctx.host,
                path: path.posix.join('/static/devextensions', relativePath)
            };
        }
    }
    if (config.folderMountPath) {
        if (!options.additionalBuiltinExtensions) {
            options.additionalBuiltinExtensions = [];
        }
        options.additionalBuiltinExtensions.push({
            scheme: ctx.protocol,
            authority: ctx.host,
            path: fsProviderExtensionPrefix
        });
        options.folderUri = URI.parse(fsProviderFolderUri);
    }
    else if (config.folderUri) {
        options.folderUri = URI.parse(config.folderUri);
    }
    else {
        options.workspaceUri = URI.from({ scheme: 'tmp', path: '/default.code-workspace' });
    }
    options.productConfiguration = { enableTelemetry: false };
    return options;
}
export async function scanForExtensions(rootPath, serverURI) {
    const result = [];
    async function getExtension(relativePosixFolderPath) {
        try {
            const packageJSONPath = path.join(rootPath, relativePosixFolderPath, 'package.json');
            if ((await fs.stat(packageJSONPath)).isFile()) {
                return {
                    scheme: serverURI.scheme,
                    authority: serverURI.authority,
                    path: path.posix.join(serverURI.path, relativePosixFolderPath)
                };
            }
        }
        catch {
            return undefined;
        }
        return undefined;
    }
    async function processFolder(relativePosixFolderPath) {
        const extension = await getExtension(relativePosixFolderPath);
        if (extension) {
            result.push(extension);
        }
        else {
            const folderPath = path.join(rootPath, relativePosixFolderPath);
            const entries = await fs.readdir(folderPath, { withFileTypes: true });
            for (const entry of entries) {
                if (entry.isDirectory() && entry.name.charAt(0) !== '.') {
                    await processFolder(path.posix.join(relativePosixFolderPath, entry.name));
                }
            }
        }
    }
    await processFolder('');
    return result;
}
//# sourceMappingURL=data:application/json;base64,