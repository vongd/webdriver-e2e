var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Key } from 'webdriverio';
import { TreeSection } from '../TreeSection.js';
import { CustomTreeItem } from './CustomTreeItem.js';
import { PageDecorator } from '../../../utils.js';
import { ViewSection as ViewSectionLocators, CustomTreeSection as CustomTreeSectionLocators } from '../../../../locators/1.73.0.js';
/**
 * Custom tree view, e.g. contributed by an extension
 *
 * @category Sidebar
 */
let CustomTreeSection = class CustomTreeSection extends TreeSection {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = ['ViewSection', 'CustomTreeSection'];
    }
    async getVisibleItems() {
        const items = [];
        const elements = await this.itemRow$$;
        for (const element of elements) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            items.push(await new CustomTreeItem(this.locatorMap, element, this).wait());
        }
        return items;
    }
    async findItem(label, maxLevel = 0) {
        await this.expand();
        const container = await this.rowContainer$;
        await container.waitForExist({ timeout: 5000 });
        await browser.action('key').down(Key.Home).up(Key.Home).perform();
        let item;
        const elements = await container.$$(this.locators.itemRow);
        for (const element of elements) {
            const temp = await element.$$(this.locators.rowWithLabel(label));
            if (temp.length > 0) {
                const level = +await temp[0].getAttribute(this.locatorMap.ViewSection.level);
                if (maxLevel < 1 || level <= maxLevel) {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
                    item = await new CustomTreeItem(this.locatorMap, element, this).wait();
                }
            }
        }
        return item;
    }
};
CustomTreeSection = __decorate([
    PageDecorator({ ...ViewSectionLocators, ...CustomTreeSectionLocators })
], CustomTreeSection);
export { CustomTreeSection };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3VzdG9tVHJlZVNlY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvc2lkZWJhci90cmVlL2N1c3RvbS9DdXN0b21UcmVlU2VjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBRWpDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUUvQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFHcEQsT0FBTyxFQUFFLGFBQWEsRUFBa0IsTUFBTSxtQkFBbUIsQ0FBQTtBQUNqRSxPQUFPLEVBQ0gsV0FBVyxJQUFJLG1CQUFtQixFQUNsQyxpQkFBaUIsSUFBSSx5QkFBeUIsRUFDakQsTUFBTSxnQ0FBZ0MsQ0FBQTtBQUd2Qzs7OztHQUlHO0FBRUksSUFBTSxpQkFBaUIsR0FBdkIsTUFBTSxpQkFBa0IsU0FBUSxXQUFXO0lBQTNDOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLENBQUMsYUFBc0IsRUFBRSxtQkFBNEIsQ0FBQyxDQUFBO0lBaUM5RSxDQUFDO0lBL0JHLEtBQUssQ0FBQyxlQUFlO1FBQ2pCLE1BQU0sS0FBSyxHQUFlLEVBQUUsQ0FBQTtRQUM1QixNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUE7UUFDckMsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUU7WUFDNUIsaUVBQWlFO1lBQ2pFLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQWMsRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO1NBQ3JGO1FBQ0QsT0FBTyxLQUFLLENBQUE7SUFDaEIsQ0FBQztJQUVELEtBQUssQ0FBQyxRQUFRLENBQUUsS0FBYSxFQUFFLFFBQVEsR0FBRyxDQUFDO1FBQ3ZDLE1BQU0sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFBO1FBRW5CLE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQTtRQUMxQyxNQUFNLFNBQVMsQ0FBQyxZQUFZLENBQUMsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQTtRQUMvQyxNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO1FBQ2pFLElBQUksSUFBMEIsQ0FBQTtRQUU5QixNQUFNLFFBQVEsR0FBRyxNQUFNLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUMxRCxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtZQUM1QixNQUFNLElBQUksR0FBRyxNQUFNLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQTtZQUNoRSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNqQixNQUFNLEtBQUssR0FBRyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFlLENBQUMsQ0FBQTtnQkFDdEYsSUFBSSxRQUFRLEdBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxRQUFRLEVBQUU7b0JBQ25DLGlFQUFpRTtvQkFDakUsSUFBSSxHQUFHLE1BQU0sSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFjLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUE7aUJBQ2hGO2FBQ0o7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztDQUNKLENBQUE7QUFyQ1ksaUJBQWlCO0lBRDdCLGFBQWEsQ0FBQyxFQUFFLEdBQUcsbUJBQW1CLEVBQUUsR0FBRyx5QkFBeUIsRUFBRSxDQUFDO0dBQzNELGlCQUFpQixDQXFDN0I7U0FyQ1ksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2V5IH0gZnJvbSAnd2ViZHJpdmVyaW8nXG5cbmltcG9ydCB7IFRyZWVTZWN0aW9uIH0gZnJvbSAnLi4vVHJlZVNlY3Rpb24uanMnXG5pbXBvcnQgeyBUcmVlSXRlbSB9IGZyb20gJy4uLy4uL1ZpZXdJdGVtLmpzJ1xuaW1wb3J0IHsgQ3VzdG9tVHJlZUl0ZW0gfSBmcm9tICcuL0N1c3RvbVRyZWVJdGVtLmpzJ1xuaW1wb3J0IHsgQWxsVmlld1NlY3Rpb25Mb2NhdG9ycyB9IGZyb20gJy4uLy4uL1ZpZXdTZWN0aW9uLmpzJ1xuXG5pbXBvcnQgeyBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciB9IGZyb20gJy4uLy4uLy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHtcbiAgICBWaWV3U2VjdGlvbiBhcyBWaWV3U2VjdGlvbkxvY2F0b3JzLFxuICAgIEN1c3RvbVRyZWVTZWN0aW9uIGFzIEN1c3RvbVRyZWVTZWN0aW9uTG9jYXRvcnNcbn0gZnJvbSAnLi4vLi4vLi4vLi4vbG9jYXRvcnMvMS43My4wLmpzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEN1c3RvbVRyZWVTZWN0aW9uIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8QWxsVmlld1NlY3Rpb25Mb2NhdG9ycz4geyB9XG4vKipcbiAqIEN1c3RvbSB0cmVlIHZpZXcsIGUuZy4gY29udHJpYnV0ZWQgYnkgYW4gZXh0ZW5zaW9uXG4gKlxuICogQGNhdGVnb3J5IFNpZGViYXJcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoeyAuLi5WaWV3U2VjdGlvbkxvY2F0b3JzLCAuLi5DdXN0b21UcmVlU2VjdGlvbkxvY2F0b3JzIH0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tVHJlZVNlY3Rpb24gZXh0ZW5kcyBUcmVlU2VjdGlvbiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9IFsnVmlld1NlY3Rpb24nIGFzIGNvbnN0LCAnQ3VzdG9tVHJlZVNlY3Rpb24nIGFzIGNvbnN0XVxuXG4gICAgYXN5bmMgZ2V0VmlzaWJsZUl0ZW1zICgpOiBQcm9taXNlPFRyZWVJdGVtW10+IHtcbiAgICAgICAgY29uc3QgaXRlbXM6IFRyZWVJdGVtW10gPSBbXVxuICAgICAgICBjb25zdCBlbGVtZW50cyA9IGF3YWl0IHRoaXMuaXRlbVJvdyQkXG4gICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBlbGVtZW50cykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXJndW1lbnRcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goYXdhaXQgbmV3IEN1c3RvbVRyZWVJdGVtKHRoaXMubG9jYXRvck1hcCwgZWxlbWVudCBhcyBhbnksIHRoaXMpLndhaXQoKSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbXNcbiAgICB9XG5cbiAgICBhc3luYyBmaW5kSXRlbSAobGFiZWw6IHN0cmluZywgbWF4TGV2ZWwgPSAwKTogUHJvbWlzZTxUcmVlSXRlbSB8IHVuZGVmaW5lZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLmV4cGFuZCgpXG5cbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gYXdhaXQgdGhpcy5yb3dDb250YWluZXIkXG4gICAgICAgIGF3YWl0IGNvbnRhaW5lci53YWl0Rm9yRXhpc3QoeyB0aW1lb3V0OiA1MDAwIH0pXG4gICAgICAgIGF3YWl0IGJyb3dzZXIuYWN0aW9uKCdrZXknKS5kb3duKEtleS5Ib21lKS51cChLZXkuSG9tZSkucGVyZm9ybSgpXG4gICAgICAgIGxldCBpdGVtOiBUcmVlSXRlbSB8IHVuZGVmaW5lZFxuXG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXdhaXQgY29udGFpbmVyLiQkKHRoaXMubG9jYXRvcnMuaXRlbVJvdylcbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICBjb25zdCB0ZW1wID0gYXdhaXQgZWxlbWVudC4kJCh0aGlzLmxvY2F0b3JzLnJvd1dpdGhMYWJlbChsYWJlbCkpXG4gICAgICAgICAgICBpZiAodGVtcC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSArYXdhaXQgdGVtcFswXS5nZXRBdHRyaWJ1dGUodGhpcy5sb2NhdG9yTWFwLlZpZXdTZWN0aW9uLmxldmVsIGFzIHN0cmluZylcbiAgICAgICAgICAgICAgICBpZiAobWF4TGV2ZWwgPCAxIHx8IGxldmVsIDw9IG1heExldmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFyZ3VtZW50XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0gPSBhd2FpdCBuZXcgQ3VzdG9tVHJlZUl0ZW0odGhpcy5sb2NhdG9yTWFwLCBlbGVtZW50IGFzIGFueSwgdGhpcykud2FpdCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtXG4gICAgfVxufVxuIl19