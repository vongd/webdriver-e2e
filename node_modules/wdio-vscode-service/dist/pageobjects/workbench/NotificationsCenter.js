var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { CenterNotification, NotificationType } from './Notification.js';
import { BasePage, PageDecorator } from '../utils.js';
import { NotificationsCenter as NotificationsCenterLocator } from '../../locators/1.73.0.js';
/**
 * Notifications center page object
 *
 * @category Workbench
 */
let NotificationsCenter = class NotificationsCenter extends BasePage {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'NotificationsCenter';
    }
    /**
     * Close the notifications center
     * @returns Promise resolving when the center is closed
     */
    async close() {
        if (await this.elem.isDisplayed()) {
            await this.closeBtn$.click();
        }
    }
    /**
     * Clear all notifications in the notifications center
     * Note that this will also hide the notifications center
     * @returns Promise resolving when the clear all button is pressed
     */
    async clearAllNotifications() {
        return this.clear$.click();
    }
    /**
     * Get all notifications of a given type
     * @param type type of the notifications to look for,
     *             NotificationType.Any will retrieve all notifications
     *
     * @returns Promise resolving to array of Notification objects
     */
    async getNotifications(type) {
        const notifications = [];
        const elements = await this.row$$;
        for (const element of elements) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            const not = new CenterNotification(this.locatorMap, element);
            if (type === NotificationType.Any || await not.getType() === type) {
                notifications.push(await not.wait());
            }
        }
        return notifications;
    }
};
NotificationsCenter = __decorate([
    PageDecorator(NotificationsCenterLocator)
], NotificationsCenter);
export { NotificationsCenter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9uc0NlbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wYWdlb2JqZWN0cy93b3JrYmVuY2gvTm90aWZpY2F0aW9uc0NlbnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWdCLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUE7QUFDdEYsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQWtCLE1BQU0sYUFBYSxDQUFBO0FBQ3JFLE9BQU8sRUFBRSxtQkFBbUIsSUFBSSwwQkFBMEIsRUFBRSxNQUFNLDBCQUEwQixDQUFBO0FBRzVGOzs7O0dBSUc7QUFFSSxJQUFNLG1CQUFtQixHQUF6QixNQUFNLG1CQUFvQixTQUFRLFFBQTJDO0lBQTdFOztRQUNIOztXQUVHO1FBQ0ksZUFBVSxHQUFHLHFCQUE4QixDQUFBO0lBeUN0RCxDQUFDO0lBdkNHOzs7T0FHRztJQUNILEtBQUssQ0FBQyxLQUFLO1FBQ1AsSUFBSSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQUU7WUFDL0IsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFBO1NBQy9CO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxLQUFLLENBQUMscUJBQXFCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUM5QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsS0FBSyxDQUFDLGdCQUFnQixDQUFFLElBQXNCO1FBQzFDLE1BQU0sYUFBYSxHQUFtQixFQUFFLENBQUE7UUFDeEMsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFBO1FBRWpDLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzVCLGlFQUFpRTtZQUNqRSxNQUFNLEdBQUcsR0FBRyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBYyxDQUFDLENBQUE7WUFDbkUsSUFBSSxJQUFJLEtBQUssZ0JBQWdCLENBQUMsR0FBRyxJQUFJLE1BQU0sR0FBRyxDQUFDLE9BQU8sRUFBRSxLQUFLLElBQUksRUFBRTtnQkFDL0QsYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFBO2FBQ3ZDO1NBQ0o7UUFDRCxPQUFPLGFBQWEsQ0FBQTtJQUN4QixDQUFDO0NBQ0osQ0FBQTtBQTdDWSxtQkFBbUI7SUFEL0IsYUFBYSxDQUFDLDBCQUEwQixDQUFDO0dBQzdCLG1CQUFtQixDQTZDL0I7U0E3Q1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTm90aWZpY2F0aW9uLCBDZW50ZXJOb3RpZmljYXRpb24sIE5vdGlmaWNhdGlvblR5cGUgfSBmcm9tICcuL05vdGlmaWNhdGlvbi5qcydcbmltcG9ydCB7IEJhc2VQYWdlLCBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciB9IGZyb20gJy4uL3V0aWxzLmpzJ1xuaW1wb3J0IHsgTm90aWZpY2F0aW9uc0NlbnRlciBhcyBOb3RpZmljYXRpb25zQ2VudGVyTG9jYXRvciB9IGZyb20gJy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuZXhwb3J0IGludGVyZmFjZSBOb3RpZmljYXRpb25zQ2VudGVyIGV4dGVuZHMgSVBhZ2VEZWNvcmF0b3I8dHlwZW9mIE5vdGlmaWNhdGlvbnNDZW50ZXJMb2NhdG9yPiB7fVxuLyoqXG4gKiBOb3RpZmljYXRpb25zIGNlbnRlciBwYWdlIG9iamVjdFxuICpcbiAqIEBjYXRlZ29yeSBXb3JrYmVuY2hcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoTm90aWZpY2F0aW9uc0NlbnRlckxvY2F0b3IpXG5leHBvcnQgY2xhc3MgTm90aWZpY2F0aW9uc0NlbnRlciBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBOb3RpZmljYXRpb25zQ2VudGVyTG9jYXRvcj4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnTm90aWZpY2F0aW9uc0NlbnRlcicgYXMgY29uc3RcblxuICAgIC8qKlxuICAgICAqIENsb3NlIHRoZSBub3RpZmljYXRpb25zIGNlbnRlclxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gdGhlIGNlbnRlciBpcyBjbG9zZWRcbiAgICAgKi9cbiAgICBhc3luYyBjbG9zZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGlmIChhd2FpdCB0aGlzLmVsZW0uaXNEaXNwbGF5ZWQoKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jbG9zZUJ0biQuY2xpY2soKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2xlYXIgYWxsIG5vdGlmaWNhdGlvbnMgaW4gdGhlIG5vdGlmaWNhdGlvbnMgY2VudGVyXG4gICAgICogTm90ZSB0aGF0IHRoaXMgd2lsbCBhbHNvIGhpZGUgdGhlIG5vdGlmaWNhdGlvbnMgY2VudGVyXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiB0aGUgY2xlYXIgYWxsIGJ1dHRvbiBpcyBwcmVzc2VkXG4gICAgICovXG4gICAgYXN5bmMgY2xlYXJBbGxOb3RpZmljYXRpb25zICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2xlYXIkLmNsaWNrKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIG5vdGlmaWNhdGlvbnMgb2YgYSBnaXZlbiB0eXBlXG4gICAgICogQHBhcmFtIHR5cGUgdHlwZSBvZiB0aGUgbm90aWZpY2F0aW9ucyB0byBsb29rIGZvcixcbiAgICAgKiAgICAgICAgICAgICBOb3RpZmljYXRpb25UeXBlLkFueSB3aWxsIHJldHJpZXZlIGFsbCBub3RpZmljYXRpb25zXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byBhcnJheSBvZiBOb3RpZmljYXRpb24gb2JqZWN0c1xuICAgICAqL1xuICAgIGFzeW5jIGdldE5vdGlmaWNhdGlvbnMgKHR5cGU6IE5vdGlmaWNhdGlvblR5cGUpOiBQcm9taXNlPE5vdGlmaWNhdGlvbltdPiB7XG4gICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbnM6IE5vdGlmaWNhdGlvbltdID0gW11cbiAgICAgICAgY29uc3QgZWxlbWVudHMgPSBhd2FpdCB0aGlzLnJvdyQkXG5cbiAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGVsZW1lbnRzKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1hcmd1bWVudFxuICAgICAgICAgICAgY29uc3Qgbm90ID0gbmV3IENlbnRlck5vdGlmaWNhdGlvbih0aGlzLmxvY2F0b3JNYXAsIGVsZW1lbnQgYXMgYW55KVxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IE5vdGlmaWNhdGlvblR5cGUuQW55IHx8IGF3YWl0IG5vdC5nZXRUeXBlKCkgPT09IHR5cGUpIHtcbiAgICAgICAgICAgICAgICBub3RpZmljYXRpb25zLnB1c2goYXdhaXQgbm90LndhaXQoKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm90aWZpY2F0aW9uc1xuICAgIH1cbn1cbiJdfQ==