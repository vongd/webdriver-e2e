var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { PageDecorator, BasePage } from '../utils.js';
import { TitleBar } from '../../index.js';
import { WindowControls as WindowControlsLocators } from '../../locators/1.73.0.js';
/**
 * Page object for the windows controls part of the title bar
 *
 * @category Menu
 */
let WindowControls = class WindowControls extends BasePage {
    constructor(locators, element, bar = new TitleBar(locators)) {
        super(locators, element);
        this.bar = bar;
        /**
         * @private
         */
        this.locatorKey = 'WindowControls';
        this.setParentElement(this.bar.elem);
    }
    /**
     * Use the minimize window button
     * @returns Promise resolving when minimize button is pressed
     */
    async minimize() {
        await this.minimize$.click();
    }
    /**
     * Use the maximize window button if the window is not maximized
     * @returns Promise resolving when maximize button is pressed
     */
    async maximize() {
        try {
            await this.maximize$.click();
        }
        catch (err) {
            console.log('Window is already maximized');
        }
    }
    /**
     * Use the restore window button if the window is maximized
     * @returns Promise resolving when restore button is pressed
     */
    async restore() {
        try {
            await this.restore$.click();
        }
        catch (err) {
            console.log('Window is not maximized');
        }
    }
    /**
     * Use the window close button. Use at your own risk.
     * @returns Promise resolving when close button is pressed
     */
    async close() {
        await this.close$.click();
    }
};
WindowControls = __decorate([
    PageDecorator(WindowControlsLocators)
], WindowControls);
export { WindowControls };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2luZG93Q29udHJvbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcGFnZW9iamVjdHMvbWVudS9XaW5kb3dDb250cm9scy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxPQUFPLEVBQ0gsYUFBYSxFQUFrQixRQUFRLEVBQzFDLE1BQU0sYUFBYSxDQUFBO0FBQ3BCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUN6QyxPQUFPLEVBQUUsY0FBYyxJQUFJLHNCQUFzQixFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFHbkY7Ozs7R0FJRztBQUVJLElBQU0sY0FBYyxHQUFwQixNQUFNLGNBQWUsU0FBUSxRQUF1QztJQU12RSxZQUNJLFFBQTBCLEVBQzFCLE9BQStELEVBQ3hELE1BQWdCLElBQUksUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUU3QyxLQUFLLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBRmpCLFFBQUcsR0FBSCxHQUFHLENBQW1DO1FBUmpEOztXQUVHO1FBQ0ksZUFBVSxHQUFHLGdCQUF5QixDQUFBO1FBUXpDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLLENBQUMsUUFBUTtRQUNWLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLFFBQVE7UUFDVixJQUFJO1lBQ0EsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFBO1NBQy9CO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUE7U0FDN0M7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLE9BQU87UUFDVCxJQUFJO1lBQ0EsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFBO1NBQzlCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDVixPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUE7U0FDekM7SUFDTCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLEtBQUs7UUFDUCxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUE7SUFDN0IsQ0FBQztDQUNKLENBQUE7QUF0RFksY0FBYztJQUQxQixhQUFhLENBQUMsc0JBQXNCLENBQUM7R0FDekIsY0FBYyxDQXNEMUI7U0F0RFksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQ2hhaW5hYmxlUHJvbWlzZUVsZW1lbnQgfSBmcm9tICd3ZWJkcml2ZXJpbydcblxuaW1wb3J0IHtcbiAgICBQYWdlRGVjb3JhdG9yLCBJUGFnZURlY29yYXRvciwgQmFzZVBhZ2UsIFZTQ29kZUxvY2F0b3JNYXBcbn0gZnJvbSAnLi4vdXRpbHMuanMnXG5pbXBvcnQgeyBUaXRsZUJhciB9IGZyb20gJy4uLy4uL2luZGV4LmpzJ1xuaW1wb3J0IHsgV2luZG93Q29udHJvbHMgYXMgV2luZG93Q29udHJvbHNMb2NhdG9ycyB9IGZyb20gJy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuZXhwb3J0IGludGVyZmFjZSBXaW5kb3dDb250cm9scyBleHRlbmRzIElQYWdlRGVjb3JhdG9yPHR5cGVvZiBXaW5kb3dDb250cm9sc0xvY2F0b3JzPiB7fVxuLyoqXG4gKiBQYWdlIG9iamVjdCBmb3IgdGhlIHdpbmRvd3MgY29udHJvbHMgcGFydCBvZiB0aGUgdGl0bGUgYmFyXG4gKlxuICogQGNhdGVnb3J5IE1lbnVcbiAqL1xuQFBhZ2VEZWNvcmF0b3IoV2luZG93Q29udHJvbHNMb2NhdG9ycylcbmV4cG9ydCBjbGFzcyBXaW5kb3dDb250cm9scyBleHRlbmRzIEJhc2VQYWdlPHR5cGVvZiBXaW5kb3dDb250cm9sc0xvY2F0b3JzPiB7XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwdWJsaWMgbG9jYXRvcktleSA9ICdXaW5kb3dDb250cm9scycgYXMgY29uc3RcblxuICAgIGNvbnN0cnVjdG9yIChcbiAgICAgICAgbG9jYXRvcnM6IFZTQ29kZUxvY2F0b3JNYXAsXG4gICAgICAgIGVsZW1lbnQ/OiBDaGFpbmFibGVQcm9taXNlRWxlbWVudDxXZWJkcml2ZXJJTy5FbGVtZW50PiB8IHN0cmluZyxcbiAgICAgICAgcHVibGljIGJhcjogVGl0bGVCYXIgPSBuZXcgVGl0bGVCYXIobG9jYXRvcnMpXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGxvY2F0b3JzLCBlbGVtZW50KVxuICAgICAgICB0aGlzLnNldFBhcmVudEVsZW1lbnQodGhpcy5iYXIuZWxlbSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2UgdGhlIG1pbmltaXplIHdpbmRvdyBidXR0b25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB3aGVuIG1pbmltaXplIGJ1dHRvbiBpcyBwcmVzc2VkXG4gICAgICovXG4gICAgYXN5bmMgbWluaW1pemUgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBhd2FpdCB0aGlzLm1pbmltaXplJC5jbGljaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlIHRoZSBtYXhpbWl6ZSB3aW5kb3cgYnV0dG9uIGlmIHRoZSB3aW5kb3cgaXMgbm90IG1heGltaXplZFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gbWF4aW1pemUgYnV0dG9uIGlzIHByZXNzZWRcbiAgICAgKi9cbiAgICBhc3luYyBtYXhpbWl6ZSAoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1heGltaXplJC5jbGljaygpXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1dpbmRvdyBpcyBhbHJlYWR5IG1heGltaXplZCcpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2UgdGhlIHJlc3RvcmUgd2luZG93IGJ1dHRvbiBpZiB0aGUgd2luZG93IGlzIG1heGltaXplZFxuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHdoZW4gcmVzdG9yZSBidXR0b24gaXMgcHJlc3NlZFxuICAgICAqL1xuICAgIGFzeW5jIHJlc3RvcmUgKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXN0b3JlJC5jbGljaygpXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1dpbmRvdyBpcyBub3QgbWF4aW1pemVkJylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVzZSB0aGUgd2luZG93IGNsb3NlIGJ1dHRvbi4gVXNlIGF0IHlvdXIgb3duIHJpc2suXG4gICAgICogQHJldHVybnMgUHJvbWlzZSByZXNvbHZpbmcgd2hlbiBjbG9zZSBidXR0b24gaXMgcHJlc3NlZFxuICAgICAqL1xuICAgIGFzeW5jIGNsb3NlICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgYXdhaXQgdGhpcy5jbG9zZSQuY2xpY2soKVxuICAgIH1cbn1cbiJdfQ==