import fs from 'node:fs/promises';
import url from 'node:url';
import path from 'node:path';
import child_process from 'node:child_process';
import { VSCODE_CAPABILITY_KEY } from './constants.js';
const __dirname = url.fileURLToPath(new URL('.', import.meta.url));
function isEmulatedRosettaEnvironment() {
    const archName = child_process.spawnSync('uname', ['-m']).stdout.toString().trim();
    if (archName !== 'x86_64') {
        return false;
    }
    const processTranslated = child_process.spawnSync('sysctl', ['-in', 'sysctl.proc_translated'])
        .stdout.toString()
        .trim();
    return processTranslated === '1';
}
function getMacOsRealArch() {
    if (process.arch === 'arm64' || isEmulatedRosettaEnvironment()) {
        return 'mac64_m1';
    }
    if (process.arch === 'x64') {
        return 'mac64';
    }
    return null;
}
export function validatePlatform() {
    if (process.platform === 'linux') {
        if (process.arch === 'arm64' || process.arch === 'x64') {
            return `${process.platform}64`;
        }
        throw new Error('Only Linux 64 bits supported.');
    }
    if (process.platform === 'darwin' || process.platform === 'freebsd') {
        const osxPlatform = getMacOsRealArch();
        if (!osxPlatform) {
            throw new Error('Only Mac 64 bits supported.');
        }
        return osxPlatform;
    }
    if (process.platform !== 'win32') {
        throw new Error(`Unexpected platform or architecture: ${process.platform}, ${process.arch}`);
    }
    return process.platform;
}
export async function getLocators(version) {
    if (version === 'insiders') {
        return import('./locators/insiders.js');
    }
    const files = (await fs.readdir(path.join(__dirname, 'locators'), { encoding: 'utf-8' }))
        .filter((filename) => filename.endsWith('.js') && !filename.endsWith('.d.ts'))
        .map((filename) => filename.slice(0, -3));
    const [major, minor] = version.split('.');
    const sanitizedVersion = `${major}.${minor}.0`;
    const locatorFile = files.find((f, i) => (f === sanitizedVersion
        || (files[i + 1] && files[i + 1] > sanitizedVersion))) || files[files.length - 1];
    return import(`./locators/${locatorFile}.js`);
}
export function fileExist(filepath) {
    return fs.access(filepath).then(() => true, () => false);
}
export async function directoryExists(directoryPath) {
    try {
        const stats = await fs.stat(directoryPath);
        return stats.isDirectory();
    }
    catch {
        return false;
    }
}
export function getValueSuffix(value) {
    if (typeof value === 'boolean' && value) {
        return '';
    }
    return `=${value}`;
}
export function isVSCodeCapability(cap) {
    return Boolean(cap[VSCODE_CAPABILITY_KEY]);
}
var FileType;
(function (FileType) {
    FileType[FileType["Unknown"] = 0] = "Unknown";
    FileType[FileType["File"] = 1] = "File";
    FileType[FileType["Directory"] = 2] = "Directory";
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType || (FileType = {}));
export function getFileType(stats) {
    if (stats.isFile()) {
        return FileType.File;
    }
    if (stats.isDirectory()) {
        return FileType.Directory;
    }
    if (stats.isSymbolicLink()) {
        return FileType.SymbolicLink;
    }
    return FileType.Unknown;
}
export const isMultiremote = (obj) => typeof obj === 'object' && !Array.isArray(obj);
export const isChrome = (cap) => cap.browserName && cap.browserName.toLowerCase() === 'chrome';
//# sourceMappingURL=data:application/json;base64,