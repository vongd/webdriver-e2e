var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Key } from 'webdriverio';
import { Menu, MenuItem } from '../index.js';
import { PageDecorator, sleep } from '../utils.js';
import { ContentAssist as ContentAssistLocators } from '../../locators/1.73.0.js';
/**
 * Page object representing the content assistant
 *
 * @category Editor
 */
let ContentAssist = class ContentAssist extends Menu {
    constructor(locators, parent) {
        super(locators);
        /**
         * @private
         */
        this.locatorKey = 'ContentAssist';
        this.setParentElement(parent.elem);
    }
    /**
     * Get content assist item by name/text, scroll through the list
     * until the item is found, or the end is reached
     *
     * @param name name/text to search by
     * @returns Promise resolving to ContentAssistItem object if found, undefined otherwise
     */
    async getItem(name) {
        let lastItem = false;
        let firstItem = await this.firstItem$$;
        while (firstItem.length < 1) {
            await browser.action('key')
                .down(Key.PageUp).up(Key.PageUp)
                .perform();
            firstItem = await this.firstItem$$;
        }
        while (!lastItem) {
            const items = await this.getItems();
            for (const item of items) {
                if (await item.getLabel() === name) {
                    return item;
                }
                lastItem = lastItem || (await item.elem.getAttribute('data-last-element')) === 'true';
            }
            if (!lastItem) {
                await browser.action('key')
                    .down(Key.PageDown).up(Key.PageDown)
                    .perform();
                await sleep(100);
            }
        }
        return undefined;
    }
    /**
     * Get all visible content assist items
     * @returns Promise resolving to array of ContentAssistItem objects
     */
    async getItems() {
        await browser.waitUntil(() => this.isLoaded());
        const elements = await this.elem
            .$(this.locators.itemRows)
            .$$(this.locators.itemRow);
        const items = [];
        for (const item of elements) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
            items.push(await new ContentAssistItem(this.locatorMap, item, this).wait());
        }
        return items;
    }
    /**
     * Find if the content assist is still loading the suggestions
     * @returns promise that resolves to true when suggestions are done loading,
     * to false otherwise
     */
    async isLoaded() {
        const message = await this.message$;
        if (await message.isDisplayed()) {
            if ((await message.getText()).startsWith('No suggestions')) {
                return true;
            }
            return false;
        }
        return true;
    }
};
ContentAssist = __decorate([
    PageDecorator(ContentAssistLocators)
], ContentAssist);
export { ContentAssist };
/**
 * Page object for a content assist item
 *
 * @category Editor
 */
let ContentAssistItem = class ContentAssistItem extends MenuItem {
    constructor(locators, item, contentAssist) {
        super(locators, item);
        /**
         * @private
         */
        this.locatorKey = 'ContentAssist';
        this.label = '';
        this.parentMenu = contentAssist;
    }
    async getLabel() {
        const labelDiv = await this.itemLabel$;
        return labelDiv.getText();
    }
};
ContentAssistItem = __decorate([
    PageDecorator(ContentAssistLocators)
], ContentAssistItem);
export { ContentAssistItem };
//# sourceMappingURL=data:application/json;base64,