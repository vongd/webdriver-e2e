var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { SideBarView } from '../SideBarView.js';
import { PageDecorator } from '../../utils.js';
import { DebugView as DebugViewLocators } from '../../../locators/1.73.0.js';
/**
 * Page object representing the Run/Debug view in the side bar
 *
 * @category Sidebar
 */
let DebugView = class DebugView extends SideBarView {
    constructor() {
        super(...arguments);
        /**
         * @private
         */
        this.locatorKey = 'DebugView';
    }
    /**
     * Get the title of the selected launch configuration
     * @returns Promise resolving to the title
     */
    async getLaunchConfiguration() {
        const action = await this.getTitlePart().elem.$(this.locators.launchCombo);
        const combo = await action.$(this.locators.launchSelect);
        return combo.getAttribute('title');
    }
    /**
     * Get titles of all available launch configurations
     * @returns Promise resolving to list of titles
     */
    async getLaunchConfigurations() {
        const action = await this.getTitlePart().elem.$(this.locators.launchCombo);
        const combo = await action.$(this.locators.launchSelect);
        const configs = [];
        const options = await combo.$$(this.locators.launchOption);
        for (const option of options) {
            if (await option.isEnabled()) {
                configs.push(await option.getAttribute('value'));
            }
        }
        return configs;
    }
    /**
     * Select a given launch configuration
     * @param title title of the configuration to select
     */
    async selectLaunchConfiguration(title) {
        const action = await this.getTitlePart().elem.$(this.locators.launchCombo);
        const combo = await action.$(this.locators.launchSelect);
        const option = await combo.$(this.locators.optionByName(title));
        await option.click();
    }
    /**
     * Start Debugging using the current launch configuration
     */
    async start() {
        const action = await this.getTitlePart().elem.$(this.locators.launchCombo);
        await action.$(this.locators.startButton).click();
    }
};
DebugView = __decorate([
    PageDecorator(DebugViewLocators)
], DebugView);
export { DebugView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdWaWV3LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL3BhZ2VvYmplY3RzL3NpZGViYXIvZGVidWcvRGVidWdWaWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUMvQyxPQUFPLEVBQUUsYUFBYSxFQUFrQixNQUFNLGdCQUFnQixDQUFBO0FBQzlELE9BQU8sRUFBRSxTQUFTLElBQUksaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUc1RTs7OztHQUlHO0FBRUksSUFBTSxTQUFTLEdBQWYsTUFBTSxTQUFVLFNBQVEsV0FBcUM7SUFBN0Q7O1FBQ0g7O1dBRUc7UUFDSSxlQUFVLEdBQUcsV0FBb0IsQ0FBQTtJQWlENUMsQ0FBQztJQS9DRzs7O09BR0c7SUFDSCxLQUFLLENBQUMsc0JBQXNCO1FBQ3hCLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUMxRSxNQUFNLEtBQUssR0FBRyxNQUFNLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUN4RCxPQUFPLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDdEMsQ0FBQztJQUVEOzs7T0FHRztJQUNILEtBQUssQ0FBQyx1QkFBdUI7UUFDekIsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzFFLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3hELE1BQU0sT0FBTyxHQUFhLEVBQUUsQ0FBQTtRQUM1QixNQUFNLE9BQU8sR0FBRyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUUxRCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBRTtZQUMxQixJQUFJLE1BQU0sTUFBTSxDQUFDLFNBQVMsRUFBRSxFQUFFO2dCQUMxQixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBO2FBQ25EO1NBQ0o7UUFFRCxPQUFPLE9BQU8sQ0FBQTtJQUNsQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsS0FBSyxDQUFDLHlCQUF5QixDQUFFLEtBQWE7UUFDMUMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzFFLE1BQU0sS0FBSyxHQUFHLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ3hELE1BQU0sTUFBTSxHQUFHLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO1FBQy9ELE1BQU0sTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNILEtBQUssQ0FBQyxLQUFLO1FBQ1AsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBQzFFLE1BQU0sTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFBO0lBQ3JELENBQUM7Q0FDSixDQUFBO0FBckRZLFNBQVM7SUFEckIsYUFBYSxDQUFDLGlCQUFpQixDQUFDO0dBQ3BCLFNBQVMsQ0FxRHJCO1NBckRZLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaWRlQmFyVmlldyB9IGZyb20gJy4uL1NpZGVCYXJWaWV3LmpzJ1xuaW1wb3J0IHsgUGFnZURlY29yYXRvciwgSVBhZ2VEZWNvcmF0b3IgfSBmcm9tICcuLi8uLi91dGlscy5qcydcbmltcG9ydCB7IERlYnVnVmlldyBhcyBEZWJ1Z1ZpZXdMb2NhdG9ycyB9IGZyb20gJy4uLy4uLy4uL2xvY2F0b3JzLzEuNzMuMC5qcydcblxuZXhwb3J0IGludGVyZmFjZSBEZWJ1Z1ZpZXcgZXh0ZW5kcyBJUGFnZURlY29yYXRvcjx0eXBlb2YgRGVidWdWaWV3TG9jYXRvcnM+IHsgfVxuLyoqXG4gKiBQYWdlIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIFJ1bi9EZWJ1ZyB2aWV3IGluIHRoZSBzaWRlIGJhclxuICpcbiAqIEBjYXRlZ29yeSBTaWRlYmFyXG4gKi9cbkBQYWdlRGVjb3JhdG9yKERlYnVnVmlld0xvY2F0b3JzKVxuZXhwb3J0IGNsYXNzIERlYnVnVmlldyBleHRlbmRzIFNpZGVCYXJWaWV3PHR5cGVvZiBEZWJ1Z1ZpZXdMb2NhdG9ycz4ge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcHVibGljIGxvY2F0b3JLZXkgPSAnRGVidWdWaWV3JyBhcyBjb25zdFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB0aXRsZSBvZiB0aGUgc2VsZWN0ZWQgbGF1bmNoIGNvbmZpZ3VyYXRpb25cbiAgICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0aGUgdGl0bGVcbiAgICAgKi9cbiAgICBhc3luYyBnZXRMYXVuY2hDb25maWd1cmF0aW9uICgpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSBhd2FpdCB0aGlzLmdldFRpdGxlUGFydCgpLmVsZW0uJCh0aGlzLmxvY2F0b3JzLmxhdW5jaENvbWJvKVxuICAgICAgICBjb25zdCBjb21ibyA9IGF3YWl0IGFjdGlvbi4kKHRoaXMubG9jYXRvcnMubGF1bmNoU2VsZWN0KVxuICAgICAgICByZXR1cm4gY29tYm8uZ2V0QXR0cmlidXRlKCd0aXRsZScpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRpdGxlcyBvZiBhbGwgYXZhaWxhYmxlIGxhdW5jaCBjb25maWd1cmF0aW9uc1xuICAgICAqIEByZXR1cm5zIFByb21pc2UgcmVzb2x2aW5nIHRvIGxpc3Qgb2YgdGl0bGVzXG4gICAgICovXG4gICAgYXN5bmMgZ2V0TGF1bmNoQ29uZmlndXJhdGlvbnMgKCk6IFByb21pc2U8c3RyaW5nW10+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gYXdhaXQgdGhpcy5nZXRUaXRsZVBhcnQoKS5lbGVtLiQodGhpcy5sb2NhdG9ycy5sYXVuY2hDb21ibylcbiAgICAgICAgY29uc3QgY29tYm8gPSBhd2FpdCBhY3Rpb24uJCh0aGlzLmxvY2F0b3JzLmxhdW5jaFNlbGVjdClcbiAgICAgICAgY29uc3QgY29uZmlnczogc3RyaW5nW10gPSBbXVxuICAgICAgICBjb25zdCBvcHRpb25zID0gYXdhaXQgY29tYm8uJCQodGhpcy5sb2NhdG9ycy5sYXVuY2hPcHRpb24pXG5cbiAgICAgICAgZm9yIChjb25zdCBvcHRpb24gb2Ygb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGF3YWl0IG9wdGlvbi5pc0VuYWJsZWQoKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3MucHVzaChhd2FpdCBvcHRpb24uZ2V0QXR0cmlidXRlKCd2YWx1ZScpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbmZpZ3NcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgYSBnaXZlbiBsYXVuY2ggY29uZmlndXJhdGlvblxuICAgICAqIEBwYXJhbSB0aXRsZSB0aXRsZSBvZiB0aGUgY29uZmlndXJhdGlvbiB0byBzZWxlY3RcbiAgICAgKi9cbiAgICBhc3luYyBzZWxlY3RMYXVuY2hDb25maWd1cmF0aW9uICh0aXRsZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IGF3YWl0IHRoaXMuZ2V0VGl0bGVQYXJ0KCkuZWxlbS4kKHRoaXMubG9jYXRvcnMubGF1bmNoQ29tYm8pXG4gICAgICAgIGNvbnN0IGNvbWJvID0gYXdhaXQgYWN0aW9uLiQodGhpcy5sb2NhdG9ycy5sYXVuY2hTZWxlY3QpXG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IGF3YWl0IGNvbWJvLiQodGhpcy5sb2NhdG9ycy5vcHRpb25CeU5hbWUodGl0bGUpKVxuICAgICAgICBhd2FpdCBvcHRpb24uY2xpY2soKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IERlYnVnZ2luZyB1c2luZyB0aGUgY3VycmVudCBsYXVuY2ggY29uZmlndXJhdGlvblxuICAgICAqL1xuICAgIGFzeW5jIHN0YXJ0ICgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgYWN0aW9uID0gYXdhaXQgdGhpcy5nZXRUaXRsZVBhcnQoKS5lbGVtLiQodGhpcy5sb2NhdG9ycy5sYXVuY2hDb21ibylcbiAgICAgICAgYXdhaXQgYWN0aW9uLiQodGhpcy5sb2NhdG9ycy5zdGFydEJ1dHRvbikuY2xpY2soKVxuICAgIH1cbn1cbiJdfQ==